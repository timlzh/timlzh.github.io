<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[数学]圆锥曲线整理（慢慢更新）</title>
      <link href="/%E6%95%B0%E5%AD%A6-%E5%9C%86%E9%94%A5%E6%9B%B2%E7%BA%BF%E6%95%B4%E7%90%86%EF%BC%88%E6%85%A2%E6%85%A2%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/%E6%95%B0%E5%AD%A6-%E5%9C%86%E9%94%A5%E6%9B%B2%E7%BA%BF%E6%95%B4%E7%90%86%EF%BC%88%E6%85%A2%E6%85%A2%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>数学太垃圾啦<br><a id="more"></a></p></blockquote><h1 id="直线与曲线联立速算"><a href="#直线与曲线联立速算" class="headerlink" title="直线与曲线联立速算"></a>直线与曲线联立速算</h1><h2 id="定理推算"><a href="#定理推算" class="headerlink" title="定理推算"></a>定理推算</h2><h3 id="椭圆-双曲线"><a href="#椭圆-双曲线" class="headerlink" title="椭圆/双曲线"></a>椭圆/双曲线</h3><p>已知椭圆$C:\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1(a &gt; b &gt; 0)$与直线$l:y = kx + m$交于$E$、$F$</p><p>联立:<br>消去$x$得$(a^2k^2 + b^2)x^2 + 2a^2kmx + a^2(m^2 - b^2) = 0$<br>消去$y$得$(a^2k^2 + b^2)y^2 + 2b^2my + b^2(m^2 - a^2k^2) = 0$</p><p>$<br>\Rightarrow<br>\Delta_x = 4a^2b^2(a^2k^2 + b^2 - m^2) \\<br>\Delta_y = 4a^2b^2k^2(a^2k^2 + b^2 - m^2)<br>$<br>韦达定理得:<br>$<br>x_1 + x_2 = -\frac{2a^2km}{a^2k^2 + b^2} \\<br>x_1x_2 = \frac{a^2m^2 - a^2b^2}{a^2k^2 + b^2}<br>$</p><p>$<br>y_1 + y_2 = \frac{2b^2m}{a^2k^2 + b^2} \\<br>y_1y_2 = \frac{b^2m^2 - a^2b^2k^2}{a^2k^2 + b^2}$</p><p>(用$x$的公式推$y$的公式的方法:$a^2$、$b^2$互换,$k$、$1$互换,$m$不变)</p><p>$<br>|EF| = \sqrt{(x_1 - x_2)^2 + (y_1 - y_2)^2} \\<br>= \sqrt{(1 + k^2)[(x_2 + x_2)^2 - 4x_1x_2]}\\<br>= \sqrt{k^2 + 1}\frac{\sqrt{\Delta_x}}{|a^2k^2 + b^2|} \\<br>= \sqrt{k^2 + 1}\frac{\sqrt{4a^2b^2(a^2k^2 + b^2 - m^2)}}{|a^2k^2 + b^2|}<br>$</p><div class="table-container"><table><thead><tr><th>曲线方程</th><th>方程变形</th><th>a变形</th><th>b变形</th></tr></thead><tbody><tr><td>$\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1$</td><td>$\frac{x^2}{a^2} + \frac{y^2}{b^2} = 1$</td><td>$a^2$</td><td>$b^2$</td></tr><tr><td>$\frac{y^2}{a^2} + \frac{x^2}{b^2} = 1$</td><td>$\frac{x^2}{b^2} + \frac{y^2}{a^2} = 1$</td><td>$b^2$</td><td>$a^2$</td></tr><tr><td>$\frac{x^2}{a^2} - \frac{y^2}{b^2} = 1$</td><td>$\frac{x^2}{a^2} + \frac{y^2}{-b^2} = 1$</td><td>$a^2$</td><td>$-b^2$</td></tr><tr><td>$\frac{y^2}{a^2} - \frac{x^2}{b^2} = 1$</td><td>$\frac{x^2}{-b^2} + \frac{y^2}{a^2} = 1$</td><td>$-b^2$</td><td>$a^2$</td></tr><tr><td>$x^2 + y^2 = r^2$</td><td>$\frac{x^2}{r^2} + \frac{y^2}{r^2} = 1$</td><td>$r^2$</td><td>$r^2$</td></tr></tbody></table></div><h3 id="抛物线"><a href="#抛物线" class="headerlink" title="抛物线"></a>抛物线</h3><p>已知抛物线$C:y^2 = nx$和直线$l:y = kx + m$交于$E$、$F$</p><p>联立:<br>消去$y$得$k^2x^2 + (2km - n)x + m^2 = 0$<br>消去$x$得$y^2 - \frac{n}{k}y+\frac{nm}{k} = 0$</p><p>$<br>\Rightarrow<br>\Delta_x = n(n - 4km) \\<br>\Delta_y = \frac{n}{k}(\frac{n}{k} - 4m) \\<br>(\Delta_y = \frac{\Delta_x}{k^2})$</p><p>韦达定理得:<br>$x_1 + x_2 = \frac{n - 2km}{k^2} \\<br>x_1x_2 = \frac{m^2}{k^2}$</p><p>$y_1 + y_2 = \frac{n}{k}\\<br>y_1y_2 = \frac{nm}{k}$</p><p>$|EF| = \sqrt{k^2 + 1}\frac{\sqrt{n(n-4km)}}{|k^2|}$</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10月25日刷题被虐祭</title>
      <link href="/20201025/"/>
      <url>/20201025/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>兴冲冲地跑去做题了，结果体无完肤了</p></blockquote><a id="more"></a><h1 id="10月25日刷题被虐祭"><a href="#10月25日刷题被虐祭" class="headerlink" title="10月25日刷题被虐祭"></a>10月25日刷题被虐祭</h1><p>话说突然OJ上就更新题了，我兴冲冲跑去做，结果被虐的体无完肤了。</p><p>$T1(#20)$是一道贪心<del>水</del>题,Luogu贪心题单里的原题，然鹅由于<del>我太蒟了</del>还去Luogu上瞄了一眼原来的程序才AC，Orz。</p><p>$T2(#21)$是一道<del>我根本不知道正解是什么的</del>题，本来想用下标表示数字的，一看数据范围$10^9$瞬间萎了，改成了哈希(<del>怎么可能我这种蒟蒻怎么可能会写hash表，其实我直接用的map</del>)，于是由于STL巨慢的特性用了$800$多毫秒踩着$TLE$的边缘过的。</p><p>$T3(#22)$我用dfs，前缀和，dp，调了一早上，一直$20$分，不是$WA$声一片就是$TLE$，最后一看原来**这道题是道二分，顺利过了。</p><p>$T4(#23)$是一道$Tarjan$求割点的题目，然鹅我这个图论根本就没学完的蒟蒻连割点是什么我都不知道，于是我紧急去学了一番，$Tarjan$倒是会了，但是这道题的输入输出太毒瘤了，研究输入输出又研究了半天。</p><p><del>T5还没做出来</del></p><p>$T6(#25)$也是一道二分，一下就AC了。</p><p>不得不说我太蒟了，被虐惨了QwQ</p><p>顺便%%%%%%OJ上那几个随随便便就AK所有题的大佬们，我太蒟了。</p><p><del>最后，CSP-S决赛请一定RP++</del></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0/1背包到多重背包</title>
      <link href="/MultiPacket/"/>
      <url>/MultiPacket/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在现实生活中，很少有像0/1背包一样的情况，而更多的是一件东西可以有很多件，这种情况我们就要用多重背包来解决这个问题了。</p></blockquote><a id="more"></a><h2 id="从0-1背包到多重背包"><a href="#从0-1背包到多重背包" class="headerlink" title="从0/1背包到多重背包"></a>从0/1背包到多重背包</h2><p>我们以洛谷<a href="https://www.luogu.com.cn/problem/P1833">P1833 樱花</a>作例子，来讲一讲多重背包。</p><p>我们把原题先转化成0/1背包问题来看，也就是所有的$P_i = 1$的情况，根据题目，我们很容易得到转移方程:</p><script type="math/tex; mode=display">dp[t] = max(dp[t - t[i]] + c[i],dp[t])</script><p>那么如果我们某一朵花可以看$3$遍，其实这样说来就是有三朵这样的花，我们只需要把0/1背包的过程重复$3$遍就可以了。</p><p>扩展到$P_i$，我们只需要将0/1背包的过程重复$P_i$遍就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] &gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= p[x];i++)<span class="comment">//唯一比0/1背包多出来的东西就是这个循环，代表着将0/1循环重复p[x]遍</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ti = T;ti &gt;= t[x];ti--)</span><br><span class="line">                dp[ti] = max(dp[ti - t[x]] + c[x],dp[ti]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>我们分析dp数组，我们可以得到:</p><p>第一次0/1dp时，$dp[t[x]]$到$dp[2<em>t[x]]$的数据是由$dp[0]$到$dp[t[x]]$得来的（因为$dp[ti - t[x]] + c[x]$），而第二次0/1dp时这些数据并不会改变,我们就不需要dp$t[x]$到$2</em>t[x]$这一段了，</p><p>同理:</p><p>第二次0/1dp时，$dp[2<em>t[x]]$到$dp[3</em>t[x]]$的数据是由$dp[t[x]]$到$dp[2<em>t[x]]$得来的，而第三次0/1dp时这些数据并不会改变,我们就不需要dp$2</em>t[x]$到$3*t[x]$这一段了。</p><p>也就是说，我们只需要dp $T &gt;= ti &gt;= i*t[x]$ 这一段就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] &gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= p[x];i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ti = T;ti &gt;= t[x]*i;ti--)<span class="comment">//一个简单的判断条件的改变大大减少了时间复杂度</span></span><br><span class="line">                dp[ti] = max(dp[ti - t[x]] + c[x],dp[ti]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题解-748-00KB-843ms"><a href="#题解-748-00KB-843ms" class="headerlink" title="题解/$748.00KB$/$843ms$"></a>题解/$748.00KB$/$843ms$</h2><p>这道题还有一部分是$P_i == 0$的，也就是说可以看无限多次，也就是说，这种情况是完全背包。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] &gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= p[x];i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ti = T;ti &gt;= t[x]*i;ti--)</span><br><span class="line">                dp[ti] = max(dp[ti - t[x]] + c[x],dp[ti]);</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//完全背包部分</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ti = t[x];ti &lt;= T;ti++)</span><br><span class="line">            dp[ti] = max(dp[ti - t[x]] + c[x],dp[ti]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这道题的读入有点特殊，但是用<code>scanf</code>可以轻松解决。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d %d:%d&quot;</span>,&amp;h1,&amp;m1,&amp;h2,&amp;m2);</span><br></pre></td></tr></table></figure><p>时间的计算很简单，就不赘述了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T = (h2-h1)*<span class="number">60</span> + m2 - m1;</span><br></pre></td></tr></table></figure><p>那么完整的代码就出来了:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,t[MAXN],c[MAXN],p[MAXN],dp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h1,m1,h2,m2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d:%d %d:%d %d&quot;</span>,&amp;h1,&amp;m1,&amp;h2,&amp;m2,&amp;n);</span><br><span class="line">    T = (h2 - h1)*<span class="number">60</span> + m2 - m1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;c[i]&gt;&gt;p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[x] &gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= p[x];i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> ti = T;ti &gt;= t[x]*i;ti--)</span><br><span class="line">                    dp[ti] = max(dp[ti - t[x]] + c[x],dp[ti]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ti = t[x];ti &lt;= T;ti++)</span><br><span class="line">                dp[ti] = max(dp[ti - t[x]] + c[x],dp[ti]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[T]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从01背包到完全背包</title>
      <link href="/AllPacket/"/>
      <url>/AllPacket/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从01背包到完全背包就是一件非常简单的事情，这里以<a href="https://www.luogu.com.cn/problem/P1616">P1616 疯狂的采药</a>做例子，来讲一讲如何从01背包迁移到完全背包。</p></blockquote><a id="more"></a><p>还记得我们上次在<a href="/01packet/">从记忆化搜索到0/1背包</a>里的东西么？</p><blockquote><p>但是，我们要注意，如果我们正着dp，也就是从$ti = 0$dp到$ti = n$，这样有可能会重复，也就是比如我们$dp[6]$取了第$x$件物品，到后面如果转移到$ti = 6$时（$dp[6] + v[x]$），我们就会重复计算$v[x]$，从$ti = n$dp到$ti = 0$就不会出现这个问题（$ti$小的不会转移到$ti$大的）</p></blockquote><p>然而，我们现在要的就是要重复，所以我们直接从$t_i = 0$ dp到$t_i = T$就好啦。</p><p>一维dp/$76.96MB$/$126ms$</p><blockquote><p>数据比较大,记得开long long<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXT 10000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,T,t[MAXN],v[MAXN],dp[MAXT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ti = t[x];ti &lt;= T;ti++)</span><br><span class="line">            dp[ti] = max((dp[ti-t[x]]+v[x]),dp[ti]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[T]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从记忆化搜索到0/1背包</title>
      <link href="/01packet/"/>
      <url>/01packet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>作为菜到不行的苣蒻，要从暴搜过渡到记忆化再过渡到动态规划简直是一件难到不行的事。<del>以至于我的dp题单全是记忆化搜索过的</del>。现在我通过洛谷<a href="https://www.luogu.com.cn/problem/P1048">P1048 采药</a>来理解一下动归以及记忆化搜索的关系。</p></blockquote><a id="more"></a><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="暴搜-604-00KB-8-41s"><a href="#暴搜-604-00KB-8-41s" class="headerlink" title="暴搜/$604.00KB$/$8.41s$"></a>暴搜/$604.00KB$/$8.41s$</h3><p>首先，作为菜到不行的苣蒻Tim，第一个想到的当然是暴搜，<del>就不讲解了，基础的dfs</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T,t[MAXN],v[MAXN],tot,ans = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; n||T == <span class="number">0</span>)&#123;</span><br><span class="line">        ans = max(ans,tot);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t[x] &lt;= T)&#123;</span><br><span class="line">        tot += v[x],T -= t[x];</span><br><span class="line">        dfs(x+<span class="number">1</span>);</span><br><span class="line">        tot -= v[x],T += t[x];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;v[i];</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你提交上去，你会看到：完美的三十分和7个$TLE$</p><p>一看数据范围:  </p><blockquote><p>对于$30%$的数据,$M\le 10$<br>对于全部的数据,$M\le 100$  </p></blockquote><p>啊这……</p><h3 id="记忆化搜索-1016-00KB-47ms"><a href="#记忆化搜索-1016-00KB-47ms" class="headerlink" title="记忆化搜索/$1016.00KB$/$47ms$"></a>记忆化搜索/$1016.00KB$/$47ms$</h3><p>于是，我们开始了记忆化搜索的道路:</p><p>将dfs的参数扩展成两个，并给出int返回值:<code>int dfs(int x,int ti)</code>，$x$表示第$x$件物品，$ti$表示还剩余$ti$时间。</p><p>通过$mem[x][ti]$数组存储第$x$到$n$个物品在剩下$ti$时间时能拿到的最多的价值。</p><p>于是，我们容易得出，当第$x$个物品可以取时，也就是说$ti\ge t[x]$时，我们可以有两种方案，取和不取，也就是$dfs(x+1,ti-t[x]) + v[x]$（取），$dfs(x+1,ti)$(不取)，比较这两个的大小，取$max$就好了；如果$ti&lt;t[x]$，我们就取不了第$x$件物品，于是我们需要$dfs(x+1,ti)$。</p><p>我们返回的边界条件是$x &gt; n$（超出物品个数）和$ti == 0$（没时间了），我们就返回$mem[x][ti] = 0$（取不到东西）</p><p>记得初始化$mem$数组为$-1$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXT 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T,t[MAXN],v[MAXN],mem[MAXN][MAXT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ti)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mem[x][ti] != <span class="number">-1</span>) <span class="keyword">return</span> mem[x][ti];</span><br><span class="line">    <span class="keyword">if</span>(x &gt; n||ti==<span class="number">0</span>)   <span class="keyword">return</span> mem[x][ti] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dfs1 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[x] &lt;= ti) dfs1 = dfs(x+<span class="number">1</span>,ti-t[x]) + v[x];</span><br><span class="line">    <span class="keyword">return</span> mem[x][T] = max(dfs1,dfs(x+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;v[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(mem,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mem));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dfs(<span class="number">1</span>,T)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你提交上去时，你神奇的发现，AC了！其实这是因为记忆化搜索的时间复杂度和动态规划的时间复杂度差不太多，因为对于记忆化搜索来说，一条路也只会走一次，只不过是用的递归，但不至于$TLE$</p><h3 id="将dfs转化成dp"><a href="#将dfs转化成dp" class="headerlink" title="将dfs转化成dp"></a>将dfs转化成dp</h3><p>我们dfs的方程是什么？</p><script type="math/tex; mode=display">dfs(x,ti) = max((dfs(x+1,ti-t[x])+v[x]),dfs(x+1,ti))</script><p>也就是：</p><script type="math/tex; mode=display">mem[x][ti] = max((mem[x+1][ti-t[x]]+v[x]),mem[x+1][ti])</script><p>Holy Shit!这不就是状态转移方程？</p><script type="math/tex; mode=display">dp[x][ti] = max((dp[x+1][ti-t[x]]+v[x]),dp[x+1][ti])</script><h2 id="动态规划-0-1背包"><a href="#动态规划-0-1背包" class="headerlink" title="动态规划(0/1背包)"></a>动态规划(0/1背包)</h2><h3 id="二维dp-1016-00KB-32ms"><a href="#二维dp-1016-00KB-32ms" class="headerlink" title="二维dp/$1016.00KB$/$32ms$"></a>二维dp/$1016.00KB$/$32ms$</h3><p>边界条件还是一样的：当$ti &lt; t[x]$，$dp[x][ti] = dp[x+1][ti]$;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXT 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T,t[MAXN],v[MAXN],dp[MAXN][MAXT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> ti = <span class="number">1</span>;ti &lt;= T;ti++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = n;x &gt;= <span class="number">1</span>;x--)</span><br><span class="line">            <span class="keyword">if</span>(ti &lt; t[x]) dp[x][ti] = dp[x+<span class="number">1</span>][ti];</span><br><span class="line">            <span class="keyword">else</span> dp[x][ti] = max(dp[x+<span class="number">1</span>][ti-t[x]]+v[x],dp[x+<span class="number">1</span>][ti]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[<span class="number">1</span>][T]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将二维dp转化为一维dp"><a href="#将二维dp转化为一维dp" class="headerlink" title="将二维dp转化为一维dp"></a>将二维dp转化为一维dp</h3><p>分析我们的dp数组，不难发现，每一个$ti$都对应了$n$个物品的收益，而我们只需要最大的那个收益。</p><p>我们只需要分析当第$x$件物品可以取时，取是最大值还是不取是最大值。</p><p>怎么表示呢？很明显，当时间为$ti$时，我们要是取第$x$件物品，那么我们的收益最大值就是当时间为$ti-t[x]$的最大收益加上$v[x]$,所以我们很容易得到转移方程:</p><script type="math/tex; mode=display">dp[ti] = max(dp[ti-t[x]]+v[x],dp[ti])</script><p>但是，我们要注意，如果我们正着dp，也就是从$ti = 0$dp到$ti = n$，这样有可能会重复，也就是比如我们$dp[6]$取了第$x$件物品，到后面如果转移到$ti = 6$时（$dp[6] + v[x]$），我们就会重复计算$v[x]$，从$ti = n$dp到$ti = 0$就不会出现这个问题（$ti$小的不会转移到$ti$大的）</p><p>而且我们只需要dp$ti \ge t[x]$，因为当$ti &lt; t[x]$时，我们的转移$dp[ti-t[x]]$会溢出,因为我们根本取不了$x$。</p><h3 id="一维dp-632-00KB-41ms"><a href="#一维dp-632-00KB-41ms" class="headerlink" title="一维dp/$632.00KB$/$41ms$"></a>一维dp/$632.00KB$/$41ms$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXT 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T,t[MAXN],v[MAXN],dp[MAXT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t[i]&gt;&gt;v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">1</span>;x &lt;= n;x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ti = T;ti &gt;= t[x];ti--)</span><br><span class="line">            dp[ti] = max((dp[ti-t[x]]+v[x]),dp[ti]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[T]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排列组合基础</title>
      <link href="/A&amp;C/"/>
      <url>/A&amp;C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>初赛前临时抱佛脚一下排列组合</p></blockquote><a id="more"></a><h2 id="分步加法原理"><a href="#分步加法原理" class="headerlink" title="分步加法原理"></a>分步加法原理</h2><ol><li>定义:完成一件事情有$n$种方法，在第一类方法中有$m_1$种不同的方法，第二类方法种有$m_2$种不同的方法……那么完成这件事共有$m_1+m_2+m_3+……+m_n$种方法</li><li>本质:每一类方法均能独立完成任务</li><li>特点:分成几类就有几类相加</li></ol><h2 id="分步乘法原理"><a href="#分步乘法原理" class="headerlink" title="分步乘法原理"></a>分步乘法原理</h2><ol><li>定义:做一件事，完成它有$n$个步骤，做第一个步骤有$m_1$种不同的方法；做第二个步骤有$m_2$个不同的方法……那么完成这件事有$m_1·m_2……·m_n$种不同的方法</li><li>本质:每一步均不能独立完成任务，都是不可缺少的环节</li><li>特点:分成几步，就有几类相乘</li></ol><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><ol><li>定义:从$n$个不同元素中任取$m$个元素$(m\le n)$，按照一定顺序排成一列，叫做$n$个元素中取出$m$个元素的排列。</li><li><p>使用排列的条件:</p><ol><li>$n$个不同的的元素</li><li>任取$m$个</li><li>讲究顺序</li></ol></li></ol><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ol><li>定义:从$n$个不同元素中任取$m$个元素$(m\le n)$并成一组(具有无序性)，叫做$n$个元素中取出$m$个元素的组合。</li><li><p>使用组合的条件:</p><ol><li>$n$个不同的的元素</li><li>任取$m$个</li><li>并成一组，不讲究顺序</li></ol></li></ol><h2 id="排列数"><a href="#排列数" class="headerlink" title="排列数"></a>排列数</h2><ol><li>定义:从$n$个不同元素中任取$m$个元素$(m\le n)$的所有排列的个数，叫做$n$个元素中取出$m$个元素的排列数，记为$A^m_n$</li><li>公式:    <script type="math/tex; mode=display">A_n^m = n \times (n-1) \times (n-2) …… \times (n-m+1)</script><script type="math/tex; mode=display">= n!\div (n-m)!</script></li><li>全排列:从$n$个元素中取$n$个元素的所有排列的个数。记做$A^n_n$</li></ol><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><ol><li>定义:从$n$个不同元素中任取$m$个元素$(m\le n)$的所有组合的个数，叫做$n$个元素中取出$m$个元素的排列数，记为$C^m_n$</li><li>公式:    <script type="math/tex; mode=display">C_n^m = A_n^m\div A_n^n</script></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 初赛 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Updating)[C++]大整数算法(重载函数和运算符)</title>
      <link href="/bigintger/"/>
      <url>/bigintger/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class = "fa fa-quote-left fa-3x fa-pull-left"></i>在各种语言中，很多东西都是不一样的，但是数字大小限制都是一样的。也就是说，溢出，是一个让所有程序员都头疼的东西。<br>大整数加减法，也就是为了解决过大的数字无法计算而生的。<br><a id="more"></a></p></blockquote><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><blockquote><p>C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。<br>重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。<br>当您调用一个重载函数或重载运算符时，编译器通过把您所使用的参数类型与定义中的参数类型进行比较，决定选用最合适的定义。选择最合适的重载函数或重载运算符的过程，称为重载决策。  </p></blockquote><p>上面这段话引用自<a href="https://www.runoob.com/cplusplus/cpp-overloading.html">RunNoob</a></p><p>在我认为就是创建或者修改$+-\times \div &lt; \le &gt; \ge ==$这些运算符或者某个变量自带的函数。(是不是有点像定义新运算)</p><p>比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    num <span class="keyword">operator</span>++(num b)&#123;</span><br><span class="line">        a = a + b.a + b.a;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line">    num a,b;</span><br><span class="line">    a.a = <span class="number">1</span>;</span><br><span class="line">    b.b = <span class="number">2</span>;</span><br><span class="line">    a = a ++ b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码定义了$a++b = a + b + b$</p><p>看到这相信也很清楚重载的用法了，现在就让我们看看如何写重载运算符的高精度运算8.</p><h1 id="高精度运算"><a href="#高精度运算" class="headerlink" title="高精度运算"></a>高精度运算</h1><h2 id="主体（结构体）"><a href="#主体（结构体）" class="headerlink" title="主体（结构体）"></a>主体（结构体）</h2><p>我们需要一个结构体，里面存储这个数的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nums</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> arg[MAXN],len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>arg</code>这个数组用来存储这个数，<code>len</code>是这个数的长度<code>arg[0]</code>就是个位，<code>arg[len-1]</code>就是最高位。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>我们在创建这个数的时候要自动把这个数设置零，长度设置成1(0也是一位，这个要注意，否则可能出问题)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[贪心]国王游戏</title>
      <link href="/King/"/>
      <url>/King/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>冲冲冲，贪心题单的最后一道题</p></blockquote><a id="more"></a><h1 id="洛谷P1080-国王游戏"><a href="#洛谷P1080-国王游戏" class="headerlink" title="洛谷P1080 国王游戏"></a><a href="https://www.luogu.com.cn/problem/P1080">洛谷P1080 国王游戏</a></h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>恰逢$H$国国庆，国王邀请$n$位大臣来玩一个有奖游戏。首先，他让每个大臣在左、右手上面分别写下一个整数，国王自己也在左、右手上各写一个整数。然后，让这$n$位大臣排成一排，国王站在队伍的最前面。排好队后，所有的大臣都会获得国王奖赏的若干金币，每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。</p><p>国王不希望某一个大臣获得特别多的奖赏，所以他想请你帮他重新安排一下队伍的顺序，使得获得奖赏最多的大臣，所获奖赏尽可能的少。注意，国王的位置始终在队伍的最前面。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含一个整数$n$，表示大臣的人数。</p><p>第二行包含两个整数$a$和$b$，之间用一个空格隔开，分别表示国王左手和右手上的整数。</p><p>接下来$n$行，每行包含两个整数$a$和$b$，之间用一个空格隔开，分别表示每个大臣左手和右手上的整数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示重新排列后的队伍中获奖赏最多的大臣所获得的金币数。</p><h1 id="贪心策略分析"><a href="#贪心策略分析" class="headerlink" title="贪心策略分析"></a>贪心策略分析</h1><p>这种公式类的算法，我第一个想到的就是用列式子求策略。如果不大熟悉这种求策略的方法，可以看看那简化版的:<a href="/集训Day1-打怪兽-贪心/">打怪兽</a>。</p><p>设$n=2$,国王手上的为$a_0 b_0$,两个大臣手里的是$a_1 b_1$和$a_2 b_2$。现在我们要判断这两个大臣的谁在前更优，也就是比较两种情况。</p><p><strong>第一种</strong>:<br>$a_0$ $b_0$<br>$a_1$ $b_1$<br>$a_2$ $b_2$</p><p>这样最后一个大臣所拿到的金币数为:</p><script type="math/tex; mode=display">a_0\times a_1\div b_2</script><p><strong>第二种</strong>:<br>$a_0$ $b_0$<br>$a_2$ $b_2$<br>$a_1$ $b_1$</p><p>这样最后一个大臣所拿到的金币数为:</p><script type="math/tex; mode=display">a_0\times a_2\div b_1</script><p>我们现在就是要判断这两种情况哪个最少，也就是比较</p><script type="math/tex; mode=display">if(a_0\times a_1\div b_2<a_0\times a_2\div b_1)</script><p>移一下项可以得到</p><script type="math/tex; mode=display">if(a_1\times b_1<a_2\times b_2)</script><p>这样就很明显了，就是要比较每个大臣的$a$和$b$的乘积的大小，小的往前排就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贰〇贰〇菊月玖|拾日记</title>
      <link href="/20200909/"/>
      <url>/20200909/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>又要考试了QwQ</p></blockquote><a id="more"></a><h2 id="玖日"><a href="#玖日" class="headerlink" title="玖日"></a>玖日</h2><p>最近状态超差！莫名其妙的发呆和走神QwQ。</p><p>马上就要入学考试了，虽然说已经开学快两周多了，但是它还是叫开学考试。我已经预料到我考不好了哈哈哈。自闭了。</p><p>寝室是越来越不和谐了。上学期我们寝室三个人一直处于一种微妙的平衡中，井水不犯河水吧。但是新来的l同学情商好像不怎么高的样子。对x同学那个喜欢的女生，我们之前一直都是当作玩笑偶尔说一说调侃一下的，但是l同学把这好似当作头等大事一样每天不说就不舒服，到现在导致x同学一到这个话题就不开腔了。但是他都不开腔明显不想讨论这个话题了，l同学还一直穷追不舍。再加上我们寝室本来的一些不和谐因素，导致我们寝室的和谐指数每况愈下。他还看起来对我很不爽的样子，其实我可能更不爽他，只是没有表现出来而已。何必呢，和他计较不就表现得自己的情商也很低了么=_=</p><p>x同学实在是太固执了，真不是我挑三拣四，他是真的出了名的固执。跟他进行的很多次“辩论”当中，我都能拿出很合理的证据和事例来反驳和阐述，但是他就一直执着于他自己的观点，也拿不出什么有力的证据来反驳我，就一直重复他的观点，觉得我是错的。就表现出一副想说服我但是又拿不出证据，看我占据上风还很不爽的样子。所以我觉得这都算不上辩论，对我来说是，对他来说可能就是吵架吧。他要是有键盘，我觉得真的很适合当一个键盘侠。普通人真的杠不过他，毕竟他不会听你说什么，只是沉溺于自己的观点中而已。</p><p>对了，l同学喜欢d同学，哈哈哈，我是真没想到。不过确实不得不承认d同学是挺好的哈哈。但是我觉得l同学这情商，可能容易让这段还没开始的缘分被他自己扼杀在摇篮里，哈哈哈。他超酸我🍋，因为我和d是初中同学，我和d出去玩过，我还去过d的家里。听他的语气，真的是醋坛子打翻了哈哈哈哈。我和d的关系还挺好的，说实话他这几天不一直提d我都意识不到。d是个很好的女生啊哈哈哈。初中的时候某位s女士可还一直恰她和我的醋呢哈哈哈。QwQ</p><p>明天（写这句话的时候已经应该是今天了哈哈，十二点过了）是教师节诶。我得去看看MS和Y老师。但是我都没准备礼物，空手去好像挺奇怪的哈哈。Y老师不会又说我长胖了吧QwQ，太伤人心了哈哈哈。s女士一直都很想MS诶，可惜她没法来。MS真的超好哈哈哈，我也超喜欢她。Y老师应该算我初三的时候的一个导师吧哈哈哈，我啥都跟她说了，她也超认真地开导我。想回到初中，压力可太小了，还能和她待在一起。算是一段超幸福的时光了。</p><p>QwQ被自己给坑了，莫名其妙就被搞去啥英语名人演讲模仿比赛了，我都不知道讲啥。y同学模仿川普肯定很传神，我想模仿库克来着，但是我觉得好像没什么特色，现在就是找不到该讲啥，好纠结啊。我感觉自己的技术好像也不怎样QWQ，怕上去出糗就gg了。</p><p>好像说是要搞什么班级活动么，每个人都要上去表演和展示。我就和y同学上去表演相声小品吧，稍微改编一下那个剧本，效果应该挺好的，我觉得挺适合我和y同学的。</p><p>好困好困，先睡了，有啥明天再写。</p><p>记得把国王的题解写了，挺有趣的。顺便复习一下大数字运算。</p><h2 id="拾日"><a href="#拾日" class="headerlink" title="拾日"></a>拾日</h2><p>哈哈哈今天偶遇y女士，这么说来真的好久没有正面见过她了哈哈哈。</p><p>去看了M老师，哈哈哈他居然没有占音乐课，人间奇迹。一开始没有看到他，后面才发现他在他们班给两个学生讲东西。还有T老师，他又在教初三了。Y老师肯定去吃饭了，每次看她吃饭都是跑的最快的，晚上再去看她。H老师跟我们说：“考上清华北大我就很光荣了，不说这些，浙大和复旦就很满意了”哈哈哈哈，说的好像考浙大复旦有手就行哈哈哈。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>贰〇贰〇菊月肆日记</title>
      <link href="/202094/"/>
      <url>/202094/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>有人住高楼，有人在深沟。<br>有人光万丈，有人一身锈。<br>世人万千种，浮云莫去求。<br>斯人若彩虹，遇上方知有。  </p></blockquote><a id="more"></a>        <div id="aplayer-WlkTwpnu" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-WlkTwpnu"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Pretty Little Eyes",              author: "Curtis Lee",              url: "http://music.163.com/song/media/outer/url?id=5039972.mp3",              pic: "http://p1.music.126.net/QMeRbRP6VZ9c0OKnZhZ9Kw==/6644348767350223.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><p>最近看了《怦然心动》的电影，一连刷了三遍。是真的看哭了，不是因为感动啥的吧，就是心酸和其他的感情交织在一起，一下鼻子酸了。<br>真的好像我的经历啊，只是我和她没有最后那个结局。可能真的是我那个时候还不懂爱情是什么吧。她一开始对我是那么好，然而我却一直让她失望，当我彻底醒悟发现自己很对不起她的时候，我们却疏远了。我不知道她是不是喜欢或者喜欢过我，然而我是肯定喜欢她的，她肯定也知道。有的时候喜欢就是这么让你琢磨不透，来的时候你没有意识到，等你发现的时候你已经追不上了。<br>看到Juli用8美元买了另一个人的时候我就绷不住流下了眼泪。可能那对于大多数人不是一个泪点，但是对我来说那是全片最让我难过的地方。男主的希望越来越高，他一直”害怕”女主选到他，然而当他的希望到高潮的时候，一句”Eight Dollars”让希望一下子落到了冰点。是多么希望她选我，即使那会尴尬，会难为情，但是当她真的选了别人的时候，我却不甘，难过，失望。  </p><blockquote><p>“My Juli,with Eddie Truelock. She’s laughing. What was she laughing about? How could she sit there and laugh and look so beautiful?”</p></blockquote><p>那种冥冥之中注定的事，被认定的事，最后却变的不一样了，那是多么的失望啊……那种机会之前明明就在眼前，却被自己亲手毁掉的感觉，又是多么的无助。<br>明知道一切都是自己的后知后觉造成的，却又很不甘。想弥补，却又越抹越黑最后看着一切被自己亲手推进深渊的时候，留下的无力与无奈，是前所未有的，也是终身无法忘记的。</p><p>我真的好想她好想她，不由自主怦然心动身陷囹圄无法自拔。她是那么的美好，一颦一笑一悲一喜都是那么的美好。我就是喜欢她，那么喜欢她，无可自拔。心动听起来是一瞬间，其实，是那么长，那么长……  </p><blockquote><p>『相思树底说相思，思郎恨郎郎不知』</p></blockquote><h2 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h2><p>学习和生活压的我喘不过气，我已经做好了考个二流211的准备了。It doesn’t matter。或者说，It does matter，但是我没法改变。<br>竞赛我也是臭鱼烂虾，就算说是学校没给我提供一个好的环境来追赶那些竞赛大校的人，但是也是我一开始就浪费的比较高的起跑线和兴趣。现在花时间来又有什么用呢？用来给四七九的竞赛生们当垫背的么？已经显得浪费时间且毫无意义了。刘冬让我继续学，说我这是遇到困难就放弃，浪费兴趣很可惜。可是这两个观点我都不同意，我这不是遇到困难就放弃，我根本就没遇到什么困难，只是我觉得现在以我的时间，我需要符合学校的TimeTable，这让我根本就没有很多时间来深入学习这个东西，对于其他学校的竞赛生来说，时间是我的十倍，我拿什么跟他们竞争？我也没有浪费兴趣，我的兴趣可以一直保持下去，跟计算机有关的是我的兴趣，而不是参加计算机竞赛。我不去竞赛不代表我丢到了这个兴趣。<br>实话说还是我害怕了，我怕一遍上正课一边学竞赛会两头都不讨好，最后竹篮打水一场空，考的还不如裸分好，那我不是亏了？我为何要去做明知要亏本的生意呢？  </p><h2 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a>Part3</h2><p>偶尔会对自己产生怀疑，自己是不是喜欢上其他人了，可是当我反问自己是不是把她放下的时候，我的回答却是没有。<br>我是一个算是专一的人吧，就算我对其他人有好感了，我也明确去划清界限，不会放任自己的感情发展下去。我觉得在我没有对自己有没有放下她这个问题上得到一个明确的答案前，我就不该去喜欢别人。有的时候会觉得自己喜欢上了某个人，但是很快就会否认这个想法。可能十天半个月我会和一个人关系比较好，但是自然而然就消退了，抑或不是自然而然，而是我内心拒绝了。总而言之，我还没做好准备去接受别人，我不知道这是不是正确的，但是我还是这么做了。专一在我眼里可能是做一个好的男友的第一条件吧。  </p><p>但有的时候的确是那么迷茫，我觉得自己该放下她向前看了，会试着去喜欢上别的女生，但却失败了。或许我该跟她表白？她不答应我就扭头走一了百了，关于她的所有的事或许就都放下了。唔，其实我根本就没那个勇气去吧……  </p><p>反正，社恐是又加深了，特别是和女生。</p><p>但是那天赵问我是不是喜欢yyl，我确实是犹豫了。我总是说我对她不是喜欢，那到底是不是呢？有待考证。这种夹杂了很多复杂情愫的感情是最难分辨的，或许那只是好朋友，抑或是叫有好感。又或者是说那就是喜欢么？那我应该是高兴还是伤心呢，为什么而高兴呢？为了放下了她？又为了什么而伤心呢？为了放下了她？<br>反正，在我没有真正认定我放下了她之前，我是不会认为我喜欢上了别的女生的。这不是为了谁而做的表面功夫，因为这个认为不仅仅是现实中跟谁说的，也是跟自己认为，在自己的心里认为，打心底地认为自己放下她了。</p><p>或许，放下是一切的开始吧，过去永远是所有过去的最好归宿。</p><p>面朝大海，春暖花开。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇随笔写完都凌晨1点半了，当时写完就deploy然后睡觉了。第二天起来读有点词不达意。凑合看吧，网抑云Time……XD</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 一点悲伤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更新小记</title>
      <link href="/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/"/>
      <url>/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>给博客来了一次比较大的更新<br><a id="more"></a></p></blockquote><ol><li>将hexo版本更新到了5.0.2(大更新，进行了数据迁移)<br><img src="/images/pasted-9.png" alt="hexo版本"></li><li>将melody主题更新到了1.8.2<br><img src="/images/pasted-10.png" alt="melody主题"></li><li>更改主字体为consolas(英文)和幼圆(中文)并调整了字体大小<br><img src="/images/pasted-11.png" alt="字体"></li><li>添加了友链(踩爆我的奆佬们)<br><img src="/images/pasted-12.png" alt="奆佬们"></li><li>将侧边栏设为常展开<br><img src="/images/pasted-11.png" alt="侧边栏"></li><li>优化了配色方案，修复了footer为白色导致看不见的bug<br><img src="/images/pasted-13.png" alt="footer"></li><li>footer添加建站时长<br><img src="/images/pasted-13.png" alt="建站时长"></li><li>将顶部菜单栏改成中文(英文太长导致页面不美观)，并将关于我界面修改为本地预览而非重定向到服务器的ngnix地址<br><img src="/images/pasted-14.png" alt="菜单栏"><br><img src="/images/pasted-17.png" alt="关于我"></li><li>给网页标题添加动态效果<br><img src="/images/pasted-15.png" alt="聚焦"><br><img src="/images/pasted-16.png" alt="失焦"></li><li>将valine评论框的placeholder改成了一言<br><img src="/images/pasted-18.png" alt="一言"></li><li>部署了Valine-admin后台，用来管理评论和邮件推送评论(有待测试)<br><img src="/images/pasted-19.png" alt="Valine-admin后台"></li><li>将网站的推送方式从Sitemap改成了api主动推送</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[集训Day5]贪心刷题笔记</title>
      <link href="/%E9%9B%86%E8%AE%ADDay5-%E8%B4%AA%E5%BF%83%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/%E9%9B%86%E8%AE%ADDay5-%E8%B4%AA%E5%BF%83%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Todo</strong>  </p><ul><li>刷完洛谷题单贪心的所有题目QwQ  </li><li>刷十道<font style=";color:#3498db"> <strong>提高+/省选-</strong> </font>  </li><li>刷五道<font style="color:rgb(157, 61, 207)"> <strong>省选+/NOI-</strong> </font></li></ul><a id="more"></a><p><strong>Todo</strong>  </p><ul><li>刷完洛谷题单贪心的所有题目QwQ  </li><li>刷十道<font style=";color:#3498db"> <strong>提高+/省选-</strong> </font>  </li><li>刷五道<font style="color:rgb(157, 61, 207)"> <strong>省选+/NOI-</strong> </font></li></ul><!--more--><h1 id="P2240-部分背包问题"><a href="#P2240-部分背包问题" class="headerlink" title="P2240 部分背包问题"></a>P2240 部分背包问题</h1><p>最简单的贪心，策略是计算每单位重量的价值$v_i\div m_i$</p><p><strong>AC Code</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jelly</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> m,v;</span><br><span class="line">&#125;j[<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(jelly j1,jelly j2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (j1.v/j1.m) &gt; (j2.v/j2.m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,t;</span><br><span class="line">    <span class="keyword">double</span> bag = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">      <span class="built_in">cin</span>&gt;&gt;j[i].m&gt;&gt;j[i].v;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(j,j+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t-j[i].m &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            bag += j[i].v;</span><br><span class="line">            t -= j[i].m;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            bag += <span class="keyword">double</span>(t)*(j[i].v/j[i].m);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,bag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P1223-排队接水"><a href="#P1223-排队接水" class="headerlink" title="P1223 排队接水"></a>P1223 排队接水</h1><p>贪心的部分很简单，策略肯定是$T_i$大的放后面防止前面的人等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">people</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t,idx;</span><br><span class="line">&#125;p[<span class="number">1002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(people a,people b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].t;</span><br><span class="line">        p[i].idx = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p[i].idx&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        time += (n-i)*p[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%.2f&quot;</span>,time/n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="P1803-凌乱的yyy-线段覆盖"><a href="#P1803-凌乱的yyy-线段覆盖" class="headerlink" title="P1803 凌乱的yyy / 线段覆盖"></a>P1803 凌乱的yyy / 线段覆盖</h1><p>贪心策略:右端点排序，能取就取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000005 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qwq</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;orz[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(qwq otz,qwq sto)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> otz.r &lt; sto.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,count = <span class="number">1</span>,endt;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;orz[i].l&gt;&gt;orz[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(orz+<span class="number">1</span>,orz+<span class="number">1</span>+n,cmp);</span><br><span class="line">    endt = orz[<span class="number">1</span>].r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(orz[i].l &gt;= endt)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            endt = orz[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;count;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="P3817-小A的糖果"><a href="#P3817-小A的糖果" class="headerlink" title="P3817    小A的糖果"></a>P3817    小A的糖果</h1><p>贪心策略:遍历一次，要吃就吃</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, x, ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> caddy[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; caddy[i];</span><br><span class="line">        <span class="keyword">if</span> (caddy[i] + caddy[i - <span class="number">1</span>] &gt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += caddy[i] + caddy[i - <span class="number">1</span>] - x;</span><br><span class="line">            caddy[i] -= caddy[i] + caddy[i - <span class="number">1</span>] - x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P1106-删数问题"><a href="#P1106-删数问题" class="headerlink" title="P1106 删数问题"></a>P1106 删数问题</h1><p>贪心策略: 保证每一位最优</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="keyword">int</span> l,start = <span class="number">0</span>,min,flag = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l)&#123;</span><br><span class="line">            min = start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start+<span class="number">1</span>;i &lt;= start+l;i++)</span><br><span class="line">            <span class="keyword">if</span>(num[i] &lt; num[min]) min = i;</span><br><span class="line">        l -= (min - start);</span><br><span class="line">        start = min+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num[min] != <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;num[min];</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">while</span>(num[start] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;num[start++];</span><br><span class="line">          flag = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(flag) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P1478-陶陶摘苹果（升级版）"><a href="#P1478-陶陶摘苹果（升级版）" class="headerlink" title="P1478 陶陶摘苹果（升级版）"></a>P1478 陶陶摘苹果（升级版）</h1><p>贪心策略:排除摘不到的，然后从用力气小的开始摘</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qwq</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;orz[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(qwq otz,qwq sto)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> otz.y &lt; sto.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,s,a,b,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;orz[i].x&gt;&gt;orz[i].y;</span><br><span class="line">        <span class="keyword">if</span>(orz[i].x&gt;(a+b))&#123;</span><br><span class="line">            i--;n--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(orz,orz+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((s - orz[i].y) &gt;= <span class="number">0</span>)</span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        s -= orz[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="P5019-铺设道路"><a href="#P5019-铺设道路" class="headerlink" title="P5019 铺设道路"></a>P5019 铺设道路</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,d[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;d[i];</span><br><span class="line">        <span class="keyword">if</span>(d[i] &gt; d[i<span class="number">-1</span>]) ans += (d[i]-d[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 集训 </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[集训Day4]贪心算法从入门到入土</title>
      <link href="/%E9%9B%86%E8%AE%ADDay4-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/%E9%9B%86%E8%AE%ADDay4-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class = "fa fa-quote-left fa-3x fa-pull-left"></i>贪心算法，是寻找最优解问题的常用方法，这种方法模式一般将求解过程分成若干个步骤，但每个步骤都应用贪心策略，选取当前状态下最好/最优的选择（局部最优解），并以此希望最后堆叠出的结果也是最好/最优的解。</p></blockquote><a id="more"></a><h1 id="贪心算法入门-Greedy-algorithm"><a href="#贪心算法入门-Greedy-algorithm" class="headerlink" title="贪心算法入门(Greedy algorithm)"></a>贪心算法入门(Greedy algorithm)</h1><h2 id="解决贪心问题的基本步骤"><a href="#解决贪心问题的基本步骤" class="headerlink" title="解决贪心问题的基本步骤"></a>解决贪心问题的基本步骤</h2><ol><li>将原问题分解为子问题  </li><li>找出贪心策略  </li><li>得到每一个子问题的最优解  </li><li>将所有局部最优解的集合构成称为原问题的一个解  </li></ol><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h3 id="贪心算法的根本-implies-策略的选择"><a href="#贪心算法的根本-implies-策略的选择" class="headerlink" title="贪心算法的根本$\implies$策略的选择"></a>贪心算法的根本$\implies$策略的选择</h3><p>贪心算法的根本在于贪心策略的选择，如果能找出正确的贪心策略的话，贪心问题也就迎刃而解。</p><p><strong>贪心策略</strong>:即我们需要找到一种方法使得当前可以获得的收益最大。举个栗子:我们每个人都对未来有很多憧憬和计划。我们希望我们的人生都能得到最优解。但是由于我们无法预知之后几年几十年的事情发展，我们无法精准地计算出我们在每一个时间节点的完美选择。<strong>于是我们只好选择每一天，或者当前时间段我都做对自己最有帮助的事情。经过不断地积累最后得到最终结果，未必不是一种好的做法。</strong></p><h2 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h2><h3 id="P1090-合并果子"><a href="#P1090-合并果子" class="headerlink" title="P1090 合并果子"></a>P1090 合并果子</h3><blockquote><p><strong>题目描述</strong></p><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。<br>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $n-1$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$ ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 $3$种果子，数目依次为 $1$ ， $2$ ， $9$。可以先将 $1$ 、 $2$ 堆合并，新堆数目为 $3$ ，耗费体力为 $3$ 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$ ，耗费体力为 $12$ 。所以多多总共耗费体力 $=3+12=15$ 。可以证明 $15$ 为最小的体力耗费值。</p><p><strong>输入格式</strong></p><p>共两行。<br>第一行是一个整数 $n(1\leq n\leq 10000)$ ，表示果子的种类数。</p><p>第二行包含 $n$ 个整数，用空格分隔，第 $i$ 个整数 $a_i(1\leq a_i\leq 20000)$是第 $i$ 种果子的数目。</p><p><strong>输出格式</strong></p><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 $2^{31}$</p><p><strong>说明/提示</strong>  </p><p>对于$30％$的数据，保证有$n \le 1000$：<br>对于$50％$的数据，保证有$n \le 5000$；<br>对于全部的数据，保证有$n \le 10000$。  </p></blockquote><p><a href="https://www.luogu.com.cn/problem/P1090">洛谷P1090</a></p><p><strong>既然是贪心的思想:那么就首先要将问题分解成为子问题，然后着眼于子问题的最优解，最后将所有子问题的最优解汇总即可</strong></p><p>$n$堆的果子一定会经过$n-1$次合并,而每次消耗的体力之和为两堆果子的重量。其实很明显，我们要先搬重量小的那些堆，因为这样重的堆就不会被多次搬运而被算入被消耗地体力。</p><p>我们也就可以得出这道题最终要采用的贪心策略:每次取出两个最小的进行合并，合并完后再将新的堆存入，再进行重复操作。由于这里涉及到了排序，最优的方法就是用<strong>STL</strong>里的堆。</p><p><strong>AC代码如下</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;//建议不要使用万能头QwQ</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; qwq;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> x,a,b,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        qwq.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(qwq.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        a = qwq.top();</span><br><span class="line">        qwq.pop();</span><br><span class="line">        b = qwq.top();</span><br><span class="line">        qwq.pop();</span><br><span class="line">        ans += (a+b);</span><br><span class="line">        qwq.push(a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P1253-线性存储问题"><a href="#P1253-线性存储问题" class="headerlink" title="P1253 线性存储问题"></a>P1253 线性存储问题</h3><p><a href="https://www.luogu.com.cn/problem/P1253">洛谷P1253</a></p><p>这道题的贪心策略也很明显，我们可以把$L_i\times F_i$看做查询一个数据的时间，那么我们就可以将时间长的放在前面。</p><p>由于要储存三个数据($L_1$、$F_i$、编号$i$),所以我这里选择使用结构体+sort+自定义函数来解决排序问题</p><p><strong>AC代码如下</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qwq</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,f,i;</span><br><span class="line">&#125;orz[<span class="number">10002</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(qwq a,qwq b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.l*a.f &gt; b.l*b.f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;orz[j].l&gt;&gt;orz[j].f;</span><br><span class="line">        orz[j].i = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(orz+<span class="number">1</span>,orz+<span class="number">1</span>+n,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;orz[j].i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="存在的问题和难点"><a href="#存在的问题和难点" class="headerlink" title="存在的问题和难点"></a>存在的问题和难点</h2><ol><li>证明困难，大部分的贪心算法难以证明</li><li>大部分情况下其实并不是最优解</li><li>贪心问题之间的跨越度比较大</li></ol>]]></content>
      
      
      <categories>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[集训Day3]并查集</title>
      <link href="/%E9%9B%86%E8%AE%ADDay3-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/%E9%9B%86%E8%AE%ADDay3-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>并查集被很多OIer认为是最简洁而优雅的数据结构之一，主要用于解决一些元素分组的问题。它管理一系列不相交的集合，并支持两种操作：  </p><p><strong>合并（Union）</strong>：把两个不相交的集合合并为一个集合。<br><strong>查询（Find）</strong>：查询两个元素是否在同一个集合中。  </p><p>当然，这样的定义未免太过学术化，看完后恐怕不太能理解它具体有什么用。所以我们先来看看并查集最直接的一个应用场景：亲戚问题。</p></blockquote><a id="more"></a><p><strong><a href="https://www.luogu.com.cn/problem/P1551">（洛谷P1551）亲戚</a></strong><br><strong>题目背景</strong><br>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。  </p><p><strong>题目描述</strong><br>规定：$x$和$y$是亲戚，$y$和$z$是亲戚，那么$x$和$z$也是亲戚。如果$x,y$是亲戚，那么$x$的亲戚都是$y$的亲戚，$y$的亲戚也都是$x$的亲戚。 </p><p><strong>输入格式</strong><br>第一行：三个整数$n,m,p$，（$n\le 5000,m\le 5000,p\le 5000$），分别表示有$n$个人，$m$个亲戚关系，询问$p$对亲戚关系。<br>以下$m$行：每行两个数$M_i，M_j，1\le M_i，M_j\le N$，表示$M_i$和$M_j$具有亲戚关系。<br>接下来$p$行：每行两个数$P_i$，$P_j$，询问$P_i$和$P_j$是否具有亲戚关系。  </p><p><strong>输出格式</strong><br>$P$行，每行一个’Yes’或’No’。表示第$i$个询问的答案为”具有”或”不具有”亲戚关系。</p><p>这其实是一个很有现实意义的问题。我们可以建立模型，把所有人划分到若干个不相交的集合中，每个集合里的人彼此是亲戚。为了判断两个人是否为亲戚，只需看它们是否属于同一个集合即可。因此，这里就可以考虑用并查集进行维护了。</p><h1 id="并查集的创建与初始化"><a href="#并查集的创建与初始化" class="headerlink" title="并查集的创建与初始化"></a>并查集的创建与初始化</h1><p>一个并查集的元素需要有自己的编号用来代表自己，还需要一个存储一个编号指向父节点，我们可以将这个问题转化到一个数组内，数组的下标就是自己的编号，这个下标的值就是父节点的下标，所以我们一般使用数组来维护并查集：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fa[MAXN]; </span><br></pre></td></tr></table></figure><p>当然，这个数组里是没有值的，也就是还没有指向自己的父节点，所以我们需要初始化这个数组。由于我们一开始还没有并查集里面各个元素的具体指向，所以我们将并查集指向自己，在数组里就是，每个元素对应的值就是自己的下标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="寻找元素根节点"><a href="#寻找元素根节点" class="headerlink" title="寻找元素根节点"></a>寻找元素根节点</h1><p>我们可以很简单地用递归的方式寻找根节点：一层一层地访问父节点，直到根节点(根节点的标志就是父节点是元素本身)，要判断两个元素是否属于一个跟节点，只需要判断它们的根节点是否相同即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x] == x) <span class="keyword">return</span> x;<span class="comment">//判读是否是根节点</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find(fa[x]);<span class="comment">//递归父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判读是否是一个集合:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(find(a) == find(b))&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并查集的合并"><a href="#并查集的合并" class="headerlink" title="并查集的合并"></a>并查集的合并</h1><p>假设我们有一个并查集如图需要合并：</p><p><img src="https://s1.ax1x.com/2020/08/18/dKgban.png" alt="并查集"></p><blockquote><p>这张图的意思是，2指向1，1，3都指向自己,转换到数组可以看做<code>fa[1] = 1</code>,<code>fa[2] = 1</code>,<code>fa[3] = 3</code></p></blockquote><p>只需要将前者根节点指向后者的根节点就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    fa[find(a)] = find(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图:</p><p><img src="https://s1.ax1x.com/2020/08/18/dK4zM6.png" alt="合并后的效果"></p><h1 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h1><p>最简单的并查集效率是很低的，如果元素到根节点的距离很远，则需要递归的次数很多。</p><p>为了解决这个问题，我们可以使用路径压缩来尽量减少元素到根节点的距离。简单来说，就是将每个节点的父节点设为根节点就好了。</p><p>上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      fa[x] = find(fa[x]);<span class="comment">//将父节点设为递归找到的根节点</span></span><br><span class="line">      <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码可以简写为一行(三元运算)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x == fa[x])?x:(fa[x] = find(fa[x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并查集的应用"><a href="#并查集的应用" class="headerlink" title="并查集的应用"></a>并查集的应用</h1><p>我们先给出亲戚问题的AC代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 5003</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x == fa[x])?x:(fa[x] = find(fa[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> merge(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">    fa[find(a)] = find(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,p,x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">while</span>(m)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        merge(x,y);</span><br><span class="line">        m--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;((find(x) == find (y))?<span class="string">&quot;Yes&quot;</span>:<span class="string">&quot;No&quot;</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        p--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 并查集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 集训 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[集训Day1]C++中的STL</title>
      <link href="/%E9%9B%86%E8%AE%ADDay1-C-%E4%B8%AD%E7%9A%84STL/"/>
      <url>/%E9%9B%86%E8%AE%ADDay1-C-%E4%B8%AD%E7%9A%84STL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class="fa fa-quote-left fa-3x fa-pull-left"></i>在已有 C++ 尤其是 C++ 模板的基础上，从本节开始，我们开始系统地学习 STL 标准模板库，首先来了解什么是 STL，以及学习 STL 有什么用？<br>STL，英文全称 standard template library，中文可译为标准模板库或者泛型库，其包含有大量的模板类和模板函数，是 C++ 提供的一个基础模板的集合，用于完成诸如输入/输出、数学计算等功能。</p></blockquote><a id="more"></a><h1 id="Vector数组"><a href="#Vector数组" class="headerlink" title="Vector数组"></a>Vector数组</h1><blockquote><p>对比起数组固定性，Vector绝对是写数组的更方便的选择，Vector数组的创建删除插入等操作对比起数组绝对是更加方便的存在。</p></blockquote><h2 id="Vector数组的创建"><a href="#Vector数组的创建" class="headerlink" title="Vector数组的创建"></a>Vector数组的创建</h2><ol><li><p>Vector数组要包含头文件，并引入std命名空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建Vector数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;类型&gt;标识符;</span><br><span class="line"><span class="built_in">vector</span>&lt;类型&gt;标识符(最大容量);</span><br><span class="line"><span class="built_in">vector</span>&lt;类型&gt;标识符(最大容量,初始所有值);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; v;<span class="comment">//二维vector，这里最外的&lt;&gt;要有空格，否则较旧的编译器下无法通过(会识别成位运算)</span></span><br><span class="line"><span class="comment">//用向量b给向量a赋值，a的值完全等价于b的值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a(b);</span><br><span class="line"><span class="comment">//将向量b中从0-2（共三个）的元素赋值给a，a的类型为int型</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a(b.begin(),b.begin+<span class="number">3</span>);</span><br><span class="line"> <span class="comment">//从数组中获得初值</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(b,b+<span class="number">7</span>）;</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Vector数组的初始化"><a href="#Vector数组的初始化" class="headerlink" title="Vector数组的初始化"></a>Vector数组的初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.assign();</span><br><span class="line"><span class="comment">//b为向量，将b的0-2个元素赋值给向量a</span></span><br><span class="line">a.assign(b.begin(),b.begin()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//a含有4个值为2的元素</span></span><br><span class="line">a.assign(<span class="number">4</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="Vector数组的使用"><a href="#Vector数组的使用" class="headerlink" title="Vector数组的使用"></a>Vector数组的使用</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回a的最后一个元素</span></span><br><span class="line">a.back();</span><br><span class="line"><span class="comment">//返回a的第一个元素</span></span><br><span class="line">a.front();</span><br><span class="line"><span class="comment">//返回a的第i元素,当且仅当a存在</span></span><br><span class="line">a[i];</span><br><span class="line"><span class="comment">//清空a中的元素</span></span><br><span class="line">a.clear();</span><br><span class="line"><span class="comment">//判断a是否为空，空则返回true，非空则返回false</span></span><br><span class="line">a.empty();</span><br><span class="line"><span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line">a.pop_back();</span><br><span class="line"><span class="comment">//删除a中第一个（从第0个算起）到第二个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）结束</span></span><br><span class="line">a.erase(a.begin()+<span class="number">1</span>,a.begin()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">a.push_back(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置插入数值5,</span></span><br><span class="line">a.insert(a.begin()+<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置插入3个数，其值都为5</span></span><br><span class="line">a.insert(a.begin()+<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//b为数组，在a的第一个元素（从第0个元素算起）的位置插入b的第三个元素到第5个元素（不包括b+6）</span></span><br><span class="line">a.insert(a.begin()+<span class="number">1</span>,b+<span class="number">3</span>,b+<span class="number">6</span>);</span><br><span class="line"><span class="comment">//返回a中元素的个数</span></span><br><span class="line">a.size();</span><br><span class="line"><span class="comment">//返回a在内存中总共可以容纳的元素个数</span></span><br><span class="line">a.capacity();</span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值随机</span></span><br><span class="line">a.resize(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值为2</span></span><br><span class="line">a.resize(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//将a的容量扩充至100，</span></span><br><span class="line">a.reserve(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//b为向量，将a中的元素和b中的元素整体交换</span></span><br><span class="line">a.swap(b);</span><br><span class="line"><span class="comment">//b为向量，向量的比较操作还有 != &gt;= &gt; &lt;= &lt;</span></span><br><span class="line">a==b;</span><br></pre></td></tr></table></figure><h2 id="几个常用的函数"><a href="#几个常用的函数" class="headerlink" title="几个常用的函数"></a>几个常用的函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span></span><br><span class="line">sort(a.begin(),a.end());</span><br><span class="line"><span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1</span></span><br><span class="line">reverse(a.begin(),a.end());</span><br><span class="line"><span class="comment">//把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素</span></span><br><span class="line">copy(a.begin(),a.end(),b.begin()+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</span></span><br><span class="line">find(a.begin(),a.end(),<span class="number">10</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="Set容器"><a href="#Set容器" class="headerlink" title="Set容器"></a>Set容器</h1><blockquote><p>set也是STL中比较常见的容器。set集合容器实现了红黑树的平衡二叉检索树的数据结构，它会自动调整二叉树的排列，把元素放到适当的位置。set容器所包含的元素的值是唯一的，集合中的元素按一定的顺序排列。<br>我们构造set集合的目的是为了快速的检索，不可直接去修改键值。</p></blockquote><h2 id="set容器的创建"><a href="#set容器的创建" class="headerlink" title="set容器的创建"></a>set容器的创建</h2><ol><li><p>照例先引入头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建set容器的方法和创建vector函数的方法大同小异</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;类型&gt;标识符;</span><br></pre></td></tr></table></figure></li></ol><h2 id="set容器的操作"><a href="#set容器的操作" class="headerlink" title="set容器的操作"></a>set容器的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">insert() <span class="comment">//在集合中插入元素</span></span><br><span class="line">erase() <span class="comment">//删除集合中的元素</span></span><br><span class="line">clear() <span class="comment">//清除所有元素</span></span><br><span class="line">size() <span class="comment">//集合中元素的数目</span></span><br><span class="line">swap() <span class="comment">//交换两个集合变量</span></span><br><span class="line">begin() <span class="comment">//返回指向第一个元素的迭代器</span></span><br><span class="line">end() <span class="comment">//返回指向最后一个元素之后的迭代器</span></span><br><span class="line">count() <span class="comment">//返回某个值元素的个数</span></span><br><span class="line">find() <span class="comment">//返回一个指向被查找到元素的迭代器</span></span><br><span class="line">empty() <span class="comment">//如果集合为空，返回true(真）</span></span><br><span class="line">max_size() <span class="comment">//返回集合能容纳的元素的最大限值</span></span><br></pre></td></tr></table></figure><p>其实set的大部分操作是与vector类似的，不过set不支持随机访问，必须要使用迭代器去访问。由于set放入一个元素就会调整这个元素的位置，把它放到合适的位置，所以set中只有一个insert插入操作。</p><h1 id="Pair容器"><a href="#Pair容器" class="headerlink" title="Pair容器"></a>Pair容器</h1><blockquote><p>pair是将2个数据组合成一组数据，当需要这样的需求时就可以使用pair。另一个应用是，当一个函数需要返回2个数据的时候，可以选择pair。 pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</p></blockquote><h2 id="pair容器的创建"><a href="#pair容器的创建" class="headerlink" title="pair容器的创建"></a>pair容器的创建</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pair</span>&lt;T1, T2&gt; p1;            <span class="comment">//创建一个空的pair对象（使用默认构造），它的两个元素分别是T1和T2类型，采用值初始化。</span></span><br><span class="line">pair&lt;T1, T2&gt; p1(v1, v2);    //创建一个pair对象，它的两个元素分别是T1和T2类型，其中first成员初始化为v1，second成员初始化为v2。</span><br></pre></td></tr></table></figure><h2 id="pair容器的操作"><a href="#pair容器的操作" class="headerlink" title="pair容器的操作"></a>pair容器的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span> ,<span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1.first = <span class="number">1</span>;</span><br><span class="line">p1.second = <span class="number">2.5</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p1.first&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;p1.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输出结果：1 2.5</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//可以利用make_pair创建新的pair对象</span></span><br></pre></td></tr></table></figure><h1 id="Map容器"><a href="#Map容器" class="headerlink" title="Map容器"></a>Map容器</h1><blockquote><p>map是STL的一个关联容器，它提供一对一的hash。<br>第一个可以称为关键字(key)，每个关键字只能在map中出现一次；<br>第二个可能称为该关键字的值(value)；  </p><p>map以模板(泛型)方式实现，可以存储任意类型的数据，包括使用者自定义的数据类型。Map主要用于资料一对一映射(one-to-one)的情況，map內部的实现自建一颗红黑树，这颗树具有对数据自动排序的功能。在map内部所有的数据都是有序的，后边我们会见识到有序的好处。比如一个班级中，每个学生的学号跟他的姓名就存在著一对一映射的关系。</p></blockquote><h2 id="map容器的创建"><a href="#map容器的创建" class="headerlink" title="map容器的创建"></a>map容器的创建</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m1;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; m2;</span><br><span class="line"><span class="comment">//……</span></span><br></pre></td></tr></table></figure><h2 id="map容器的操作"><a href="#map容器的操作" class="headerlink" title="map容器的操作"></a>map容器的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">begin()         <span class="comment">//返回指向map头部的迭代器</span></span><br><span class="line">clear(）        <span class="comment">//删除所有元素</span></span><br><span class="line">count()         <span class="comment">//返回指定元素出现的次数</span></span><br><span class="line">empty()         <span class="comment">//如果map为空则返回true</span></span><br><span class="line">end()           <span class="comment">//返回指向map末尾的迭代器</span></span><br><span class="line">equal_range()   <span class="comment">//返回特殊条目的迭代器对</span></span><br><span class="line">erase()         <span class="comment">//删除一个元素</span></span><br><span class="line">find()          <span class="comment">//查找一个元素</span></span><br><span class="line">get_allocator() <span class="comment">//返回map的配置器</span></span><br><span class="line">insert()        <span class="comment">//插入元素</span></span><br><span class="line">key_comp()      <span class="comment">//返回比较元素key的函数</span></span><br><span class="line">lower_bound()   <span class="comment">//返回键值&gt;=给定元素的第一个位置</span></span><br><span class="line">max_size()      <span class="comment">//返回可以容纳的最大元素个数</span></span><br><span class="line">rbegin()        <span class="comment">//返回一个指向map尾部的逆向迭代器</span></span><br><span class="line">rend()          <span class="comment">//返回一个指向map头部的逆向迭代器</span></span><br><span class="line">size()          <span class="comment">//返回map中元素的个数</span></span><br><span class="line">swap()           <span class="comment">//交换两个map</span></span><br><span class="line">upper_bound()    <span class="comment">//返回键值&gt;给定元素的第一个位置</span></span><br><span class="line">value_comp()     <span class="comment">//返回比较元素value的函数</span></span><br></pre></td></tr></table></figure><h2 id="map应用实例"><a href="#map应用实例" class="headerlink" title="map应用实例"></a>map应用实例</h2><p><a href="https://www.luogu.com.cn/problem/P1360">洛谷P1360 [USACO07MAR]Gold Balanced Lineup G</a></p><p>题解如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;f;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;now(m);</span><br><span class="line">    f[now]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(x&amp;(<span class="number">1</span>&lt;&lt;j))now[j]++;</span><br><span class="line">        <span class="keyword">if</span>(x&amp;<span class="number">1</span>)<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)now[j]--;</span><br><span class="line">        <span class="keyword">if</span>(f.count(now))ans=max(ans,i-f[now]);</span><br><span class="line">        <span class="keyword">else</span> f[now]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 集训 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[集训Day1]糖果传递[HAOI2008](贪心)</title>
      <link href="/%E9%9B%86%E8%AE%ADDay1-%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92-HAOI2008-%E8%B4%AA%E5%BF%83/"/>
      <url>/%E9%9B%86%E8%AE%ADDay1-%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92-HAOI2008-%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>Description</strong><br>有n个小朋友坐成一圈，每人有ai个糖果。每人只能给左右两人传递糖果。每人每次传递一个糖果代价为1。</p><p><strong>Input</strong><br>第一行一个正整数n&lt;=1000000，表示小朋友的个数．</p><p>接下来n行，每行一个整数ai，表示第i个小朋友得到的糖果的颗数．</p><p><strong>Output</strong><br>求使所有人获得均等糖果的最小代价。</p><a id="more"></a><blockquote><p><strong>Sample Input</strong><br>4<br>1<br>2<br>5<br>4  </p><p><strong>Sample Output</strong><br>4  </p></blockquote><p>对于$30 \%$的数据，$n \leq 1000$<br>对于$100 \%$的数据，$n \leq 10^6$，保证答案可以用64位有符号整数存储。</p><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>数学方式求解:</p><p>由题易得$avg = \Sigma_{i=1}^n a_i \div n$<br>从而假设，第$i$个人从第$i-1$个人手里拿到$x_i$个糖果，传递给第$i+1$个人$x_{i+1}$个糖果后达到了$avg$<br>$\implies avg = a_i + x_i - x_{i+1}\\<br>\therefore<br>avg = a_1 + x_1 - x_2\\<br>avg = a_2 + x_2 - x_3\\<br>avg = a_3 + x_3 - x_3\\<br>……\\<br>avg = a_n + x_n - x_1\\<br>$<br>$<br>\implies<br>x_2 = a_1 - avg + x_1\\<br>x_3 = a_2 - avg  + x_2= (a_1+a_2) - 2\times avg + x_1\\<br>x_4 = a_3 - avg  + x_3= (a_1+a_2+a_3) - 3\times avg + x_1\\<br>……\\<br>\implies x_n = \Sigma_{i=1}^{n-1} a_i - (n-1)\times avg + x_1 = \Sigma_{i=1}^{n-1} [a_i - avg] + x_1<br>$</p><p>故最后求得通项  </p><script type="math/tex; mode=display">\Large x_n = \Sigma_{i=1}^{n-1} [a_i - avg] + x_1</script><p>设$C_i = \Sigma_{i=1}^{n-1} [avg - a_i]$<br>$\therefore x_n = x_1 - C_i\\<br>\implies<br>x_1 = x_1 - C_0;\\<br>x_2 = x_1 - C_1;\\<br>x_3 = x_1 - C_2;\\<br>……\\<br>x_n = x_1 - C_{n-1};\\<br>$<br>此时，问题为求$min(\Sigma_{i=1}^n x_i)$,则通过以上步骤我们将问题转化成为了$x_1$到数列$C_i$各项的距离之和的最小值。也就是求数列$C_i$的中位数到数列各项的距离之和。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line">ll a[<span class="number">1000002</span>],c[<span class="number">1000002</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n = <span class="number">0</span>,avg = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>,&amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        avg += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    avg /= n;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        c[i] = (avg - a[i])+c[i<span class="number">-1</span>];</span><br><span class="line">    sort(c,c+n);</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>,midle;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        midle=c[n/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        midle=(c[(n<span class="number">-1</span>)/<span class="number">2</span>]+c[(n<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>])/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ans+=<span class="built_in">abs</span>(c[i]-midle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[集训Day1]打怪兽(贪心)</title>
      <link href="/%E9%9B%86%E8%AE%ADDay1-%E6%89%93%E6%80%AA%E5%85%BD-%E8%B4%AA%E5%BF%83/"/>
      <url>/%E9%9B%86%E8%AE%ADDay1-%E6%89%93%E6%80%AA%E5%85%BD-%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有n只怪兽，初始你有k点血量，打第i个怪兽至少需要$a_i$的血量，打完第i个怪兽之后会掉$b_i$的血量，你可以按照任何顺序依次打完所有怪兽，并给出一种方案。</p><p>$\large n\leq10^6\qquad a_i,b_i\leq10^9$</p><a id="more"></a><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>设$n\ =\ 2$</p><p>第一组：$a_1\qquad b_1$<br>第二组：$a_2\qquad b_2$</p><p>则k需要满足条件<br>① $\large k\geq\max(a_1,a_2)$<br>②若先打第一组<br>$\large k-b_1\le a_2$<br>$\large \implies k\ge a_2+b_1$<br>同理，若先打第二组<br>$\large k\ge a_1+b_2$</p><p>比较$a_2+b_1$与$a_1+b_2$的大小<br>由于$k$在操作之后会变小，所以让大的先打，这样才能尽量多地打。</p><p>$\implies a_2+b_1?&gt;a_1+b_2$<br>$\implies a_2-b_2?&gt;a_1-b_1$<br>$\implies$扩展到n个数，我们只需要将$a_n-b_n$从大到小排列，依次执行就好了。</p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p><strong>略</strong></p>]]></content>
      
      
      <categories>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[服务器]搭建一个在线的VSCode</title>
      <link href="/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%9A%84VSCode/"/>
      <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%9A%84VSCode/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>现在电子设备一个比一个多，像我们这种程序员和OIer头疼的一点是:在一个设备上写好的代码，在别的设备上无法运行和同步，像我在pc端用的是VSCode，但是在iPad端却只有一个C++。这几天逛知乎，发现了一个很好的项目:<a href="https://github.com/cdr/code-server">code-server</a>。这个项目类似于在线的VSCode，甚至可以安装VSCode的插件。瞬间把我吸引了，于是准备在我的服务器上也部署一个这样的在线IDE。</p></blockquote><a id="more"></a><p>按照code-server项目的方法，在Linux, macOS和FreeBSD系统上有快速安装脚本，只需要两行代码。</p><p>在终端输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run</span><br></pre></td></tr></table></figure><p>完成后再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure><p>在安装时可能会遇到<code>curl: (7) Failed connect to raw.githubusercontent.com:443; Connection refuse</code>的问题。多试几次应该就好了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[服务器]各个功能的具体位置</title>
      <link href="/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%90%84%E4%B8%AA%E5%8A%9F%E8%83%BD%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%8D%E7%BD%AE/"/>
      <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%90%84%E4%B8%AA%E5%8A%9F%E8%83%BD%E7%9A%84%E5%85%B7%E4%BD%93%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>DONE</strong></p><a id="more"></a><ol><li><p><a href="http://server.itstim.xyz:8000/">宝塔面板</a></p></li><li><p><a href="http://server.itstim.xyz:5212">Cloudreve云盘</a></p></li><li><p><a href="http://server.itstim.xyz:6080/">AriaNG离线下载</a></p></li><li><p><a href="http://server.itstim.xyz:4000/">博客实时预览地址</a></p></li><li><p><a href="http://server.itstim.xyz:4000/admin">博客在线编辑地址</a></p></li><li><p><a href="http://server.itstim.xyz:6081">FileBrowser</a></p></li><li><p>CSGO服务器地址:csgo.itstim.xyz</p></li><li><p>Minecraft服务器地址:mc.itstim.xyz</p></li><li><p><a href="https://cloudmonitor.console.aliyun.com/">服务器状态云监控控制台</a></p></li><li><p><a href="https://swas.console.aliyun.com/">阿里云服务器控制台</a></p></li><li><p><a href="https://console.cloud.tencent.com/cvm/">腾讯云服务器控制台</a></p></li><li><p><a href="http://server.itstim.xyz:8096/">Emby</a></p></li><li><p><a href="http://server.itstim.xyz:2077/">在线VSCode</a></p></li><li><p><a href="http://server.itstim.xyz:19999/">状态监控</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[服务器]搭建CSGO服务器</title>
      <link href="/%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%81/"/>
      <url>/%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class="fa fa-gamepad fa-3x fa-pull-left"></i>作为一个(云)游戏爱好者，有着一群水友，打游戏常常需要调试局域网联机或者自己创建房间啥的，会有些许不方便。有了一个服务器，就可以搭建一个游戏服务端，不仅方便一起玩，还可以自己定义插件啥的。爽歪歪!</p></blockquote><a id="more"></a><hr><h1 id="Step1-基本设置-安装Steamcmd"><a href="#Step1-基本设置-安装Steamcmd" class="headerlink" title="Step1:基本设置|安装Steamcmd"></a>Step1:基本设置|安装Steamcmd</h1><ol><li><p>使用ssh以root用户身份登录到服务器，创建名为steam的用户，并切换到该用户和该用户的根目录下（用户名可以自行选择，但在后续的操作中，路径需要进行替换）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m steam   <span class="comment"># 添加名为steam的用户</span></span><br><span class="line">su steam    <span class="comment">#切换到steam用户</span></span><br><span class="line"><span class="built_in">cd</span> /home/steam/   <span class="comment">#切换到steam用户的根目录下</span></span><br></pre></td></tr></table></figure></li><li><p>创建名为steamcmd的文件夹，下载steamcmd并解压。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir steamcmd    <span class="comment">#创建名为steamcmd的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> steamcmd/    <span class="comment">#切换到文件夹目录下</span></span><br><span class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz    <span class="comment">#下载steamcmd</span></span><br><span class="line">tar zxvf steamcmd_linux.tar.gz    <span class="comment"># 解压steamcmd</span></span><br><span class="line">rm steamcmd_linux.tar.gz    <span class="comment">#删除下载的安装包，也可以保留</span></span><br></pre></td></tr></table></figure></li><li><p>安装运行steamcmd所需的环境，运行steamcmd并安装CS:GO服务端</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install glibc.i686    <span class="comment"># 安装steamcmd运行所需的库</span></span><br><span class="line">sudo yum install libstdc++.i686    <span class="comment">#有的主机已经安装其他同样效果的依赖，不用多次安装</span></span><br><span class="line">./steamcmd.sh</span><br></pre></td></tr></table></figure></li></ol><h1 id="Step2-通过Steamcmd安装CSGO服务端"><a href="#Step2-通过Steamcmd安装CSGO服务端" class="headerlink" title="Step2:通过Steamcmd安装CSGO服务端"></a>Step2:通过Steamcmd安装CSGO服务端</h1><ol><li><p>以匿名用户身份登录steamcmd</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br></pre></td></tr></table></figure></li><li><p>创建CS:GO服务器文件夹，该文件夹在steamcmd文件夹目录下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">force_install_dir ./csgo_server</span><br></pre></td></tr></table></figure></li><li><p>安装csgo服务端(需要至少30G磁盘空间)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_update 740 validate</span><br></pre></td></tr></table></figure><p> 在看到如下图片中最后的行的”Success!”后，表明CS:GO服务端安装成功（此处使用了更新成功的图片，但同样是”Success!”字样）</p><p> <img src="/images/pasted-0.png" alt="安装成功提示" title="安装成功提示"></p></li><li><p>安装完成后，退出steamcmd</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure></li></ol><h1 id="Step3-编写CS-GO更新脚本（可选）"><a href="#Step3-编写CS-GO更新脚本（可选）" class="headerlink" title="Step3:编写CS:GO更新脚本（可选）"></a>Step3:编写CS:GO更新脚本（可选）</h1><blockquote><p>CSGO更新的频率还是挺高的，服务端也是要同步更新的，所以我们可以写一个小脚本来一键更新服务端。</p></blockquote><ol><li><p>编写steamcmd的runscript脚本</p><ul><li><p>在steamcmd目录下（退出steamcmd.sh后的当前目录），使用vim创建新的update.txt文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi update.txt</span><br></pre></td></tr></table></figure></li><li><p>进入编辑模式，写入以下语句，然后保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">login anonymous</span><br><span class="line">force_install_dir ./csgo_server</span><br><span class="line">app_update 740</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编写steamcmd运行脚本</p><ul><li><p>在steamcmd目录下，使用vim创建新的csgo_server_update.sh文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi csgo_server_update.sh</span><br></pre></td></tr></table></figure></li><li><p>进入编辑模式，写入以下语句后保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#!/bin/bash</span></span><br><span class="line">./steamcmd.sh +runscript update.txt</span><br></pre></td></tr></table></figure></li><li><p>若出现了权限不足的情况，提升权限再次运行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 775 csgo_server_update.sh</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="Step4-配置并运行CS-GO服务端"><a href="#Step4-配置并运行CS-GO服务端" class="headerlink" title="Step4:配置并运行CS:GO服务端"></a>Step4:配置并运行CS:GO服务端</h1><ol><li><p>前往Steam游戏服务器帐户管理注册steam服务器登录令牌。没有该令牌服务器只能在本地网络中进行连接，在社区服务器浏览器中也不会显示。</p><ul><li><p>在App ID中填入CS:GO的ID：730。备忘录选填。</p><p><img src="/images/pasted-2.png" alt="填写AppID会返回你的登录令牌" title="填写AppID会返回你的登录令牌"></p></li><li><p>点击创建之后便获得了登录令牌，不要将该令牌泄露出去，该令牌用于服务器在CS:GO社区服务器中验证</p></li></ul></li><li><p>下载服务器配置文件server.cfg</p><ul><li><p>切换目录到CS:GO的cfg文件夹下，下载server.cfg文件，编辑server.cfg文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">cd</span> csgo_server/csgo/cfg/</span><br><span class="line">wget http://www.csgodev.com/downloads/server.cfg</span><br><span class="line">vi server.cfg</span><br></pre></td></tr></table></figure></li><li><p>进入编辑模式，在server.cfg文件中添加登录令牌，修改部分参数（这部分一定要改，不然很影响游戏体验！）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   // 新增以下参数：</span><br><span class="line">// steam account，修改为自己刚刚申请的登陆令牌</span><br><span class="line">sv_setsteamaccount <span class="string">&quot;4FXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span></span><br><span class="line"></span><br><span class="line">// 找到并修改以下参数：</span><br><span class="line">// 服务器名称，安全方面</span><br><span class="line">hostname <span class="string">&quot;Nice&#x27;s CSGO Server&quot;</span>    // 服务器在社区服务器浏览器上显示的名称，自行修改为喜欢的名字</span><br><span class="line">rcon_password <span class="string">&quot;***&quot;</span>    // CS:GO远程控制台密码，修改为自己定义的密码</span><br><span class="line">sv_password <span class="string">&quot;***&quot;</span>    // 服务器连接密码，在连接服务器时输入，不要密码可以留空</span><br><span class="line">// 游戏参数方面</span><br><span class="line">sv_maxrate <span class="string">&quot;128000&quot;</span>    // 服务器最大带宽使用量，默认值非常小，因此会造成choke值异常，此处建议改为128000</span><br><span class="line">sv_minrate <span class="string">&quot;80000&quot;</span>    // 服务器最小带宽使用量，与上面同理，此处建议改为80000</span><br><span class="line">sv_accelerate <span class="string">&quot;5.5&quot;</span>    // 人物移动速度，默认值为10，快到恶心，此处建议修改为5.5</span><br></pre></td></tr></table></figure></li><li><p>最关键的参数在下图已经用红笔圈出来了</p><p><img src="/images/pasted-3.png" alt="服务器配置"></p></li><li><p>修改完以上参数之后，服务器便可以启动了，关于server.cfg中的其他参数说明，可以在server.cfg文件的注释中查看，也可以前往<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fcsgodev.com%2Fcsgodev-server-cfg-for-csgo%2F">CSGODev</a>查看</p></li></ul></li><li><p>开放UDP 27015端口</p><ul><li><p>前往阿里云服务器防火墙控制面板，添加防火墙规则</p><p><img src="/images/pasted-4.png" alt="开放端口"></p></li></ul></li><li><p>安装screen，启动CS:GO服务器</p><ul><li><p>安装screen，以便CS:GO服务进程在后台运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install screen</span><br></pre></td></tr></table></figure></li><li><p>返回csgo_server目录，使用screen创建新的会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">cd</span> /home/steam/steamcmd/csgo_server/</span><br><span class="line">screen -S csgo</span><br></pre></td></tr></table></figure></li><li><p>注意：当screen会话未结束时，在下次ssh登陆时可以使用命令”screen -r csgo”来恢复会话</p></li><li><p>此时屏幕会清屏，说明你成功进入到”csgo”这个会话当中，这时开始启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./srcds_run -debug -game csgo -console -port 27015 -steamcmd_script /home/steam/steamcmd/update.txt -steam_dir /home/steam/ +map de_dust2</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>参数解释:<br>-debug 开启调试模式<br>-game 指明游戏，此处是csgo<br>-console 打开游戏控制台<br>-port 游戏服务器端口，此处是27015<br>-steamcmd_script 运行steamcmd的脚本文件地址<br>-steam_dir Steam的安装地址<br>+map 服务器加载的地图（此处只能用官方地图，创意工坊地图请看后面）  </p></blockquote><ul><li><p>当看到如下图所示的界面之后，说明服务器成功地运行，可以在游戏中连接了</p><p><img src="/images/pasted-5.png" alt="服务器启动成功"></p></li><li><p>记下红圈中的服务器IP地址，等会要用</p></li></ul></li></ol><h1 id="Step5-连接服务器"><a href="#Step5-连接服务器" class="headerlink" title="Step5:连接服务器"></a>Step5:连接服务器</h1><blockquote><p>控制台输入connect+空格+你的ip.</p></blockquote><h1 id="Step6-使用创意工坊地图"><a href="#Step6-使用创意工坊地图" class="headerlink" title="Step6:使用创意工坊地图"></a>Step6:使用创意工坊地图</h1><ol><li><p>注册Steam网页API</p><ul><li><p>前往Steam网页API注册页面注册API，获得Authkey（注意不要泄露出去）</p><p><img src="/images/pasted-6.png" alt="Authkey"></p></li></ul></li><li><p>获取创意工坊地图ID</p><ul><li><p>在steam的创意工坊中打开自己想要的地图的页面，复制浏览器地址上的ID。比如说，aim_map_c的地图ID是465367694</p><p><img src="/images/pasted-7.png" alt="获取地图ID"></p></li></ul></li><li><p>启动服务器</p><ul><li><p>在csgo_server文件夹中输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./srcds_run -debug -game csgo -console -port 27015 -steamcmd_script /home/steam/steamcmd/update.txt -steam_dir /home/steam/ +host_workshop_map 465367694 -authkey 3XXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><blockquote><p> 相同的参数在之前有解释，这里只解释新的参数:<br>+host_workshop_map 465367694 <strong>切换地图为来自创意工坊的地图，后面的数字填入刚刚获取的地图ID</strong><br>-authkey 3XXXXXXXXXX <strong>Steam网页API的Authkey，填入刚刚获取的API Authkey</strong></p></blockquote></li><li><p>如果不想通过重启服务器的方法来更换地图，可以在服务器控制台中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">changelevel XXXX    // XXXX可以是创意工坊地图ID，也可以是官方地图名字</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-8.png" alt="服务器后台直接更换地图"></p></li></ul></li></ol><p><strong>以上。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS:GOのcfg备份</title>
      <link href="/CS-GO%D0%B4%E2%95%ACcfg%E2%96%92%E2%95%95%E2%95%96%E2%96%8C/"/>
      <url>/CS-GO%D0%B4%E2%95%ACcfg%E2%96%92%E2%95%95%E2%95%96%E2%96%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>当然是最爱的gogo啦！</p></blockquote><a id="more"></a><h2 id="准星"><a href="#准星" class="headerlink" title="准星"></a>准星</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cl_crosshair_drawoutline <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_crosshair_dynamic_maxdist_splitratio <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_crosshair_dynamic_splitalpha_innermod <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_crosshair_dynamic_splitalpha_outermod <span class="string">&quot;0.300000&quot;</span></span><br><span class="line">cl_crosshair_dynamic_splitdist <span class="string">&quot;6&quot;</span></span><br><span class="line">cl_crosshair_friendly_warning <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_crosshair_outlinethickness <span class="string">&quot;2&quot;</span></span><br><span class="line">cl_crosshair_sniper_show_normal_inaccuracy <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_crosshair_sniper_width <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">cl_crosshair_t</span> <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_crosshairalpha <span class="string">&quot;150&quot;</span></span><br><span class="line">cl_crosshaircolor <span class="string">&quot;5&quot;</span></span><br><span class="line">cl_crosshaircolor_b <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_crosshaircolor_g <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_crosshaircolor_r <span class="string">&quot;255&quot;</span></span><br><span class="line">cl_crosshairdot <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_crosshairgap <span class="string">&quot;-2&quot;</span></span><br><span class="line">cl_crosshairgap_useweaponvalue <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_crosshairsize <span class="string">&quot;-0.3&quot;</span></span><br><span class="line">cl_crosshairstyle <span class="string">&quot;4&quot;</span></span><br><span class="line">cl_crosshairthickness <span class="string">&quot;1.5&quot;</span></span><br><span class="line">cl_crosshairusealpha <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_fixedcrosshairgap <span class="string">&quot;-100&quot;</span></span><br></pre></td></tr></table></figure><h2 id="HUD"><a href="#HUD" class="headerlink" title="HUD"></a>HUD</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cl_hud_background_alpha <span class="string">&quot;0.750000&quot;</span></span><br><span class="line">cl_hud_bomb_under_radar <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_hud_color <span class="string">&quot;4&quot;</span></span><br><span class="line">cl_hud_healthammo_style <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_hud_playercount_pos <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_hud_playercount_showcount <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_hud_radar_scale <span class="string">&quot;1.1&quot;</span></span><br><span class="line">hud_scaling <span class="string">&quot;0.750000&quot;</span></span><br><span class="line">hud_showtargetid <span class="string">&quot;1&quot;</span></span><br><span class="line">hud_takesshots <span class="string">&quot;0&quot;</span></span><br><span class="line">ui_playsettings_maps_workshop <span class="string">&quot;@workshop/817055969/hud_customize&quot;</span></span><br><span class="line">cl_radar_always_centered <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_radar_icon_scale_min <span class="string">&quot;0.7&quot;</span></span><br><span class="line">cl_radar_rotate <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_radar_scale <span class="string">&quot;0.300000&quot;</span></span><br><span class="line">cl_radar_square_with_scoreboard <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_radar_always_centered <span class="string">&quot;0&quot;</span></span><br><span class="line">cl_radar_icon_scale_min <span class="string">&quot;0.7&quot;</span></span><br><span class="line">cl_radar_rotate <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_radar_scale <span class="string">&quot;0.300000&quot;</span></span><br><span class="line">cl_radar_square_with_scoreboard <span class="string">&quot;1&quot;</span></span><br><span class="line">cl_showpos <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure><h2 id="FOV"><a href="#FOV" class="headerlink" title="FOV"></a>FOV</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cl_viewmodel_shift_left_amt <span class="string">&quot;1.5&quot;</span></span><br><span class="line">cl_viewmodel_shift_right_amt <span class="string">&quot;0.75&quot;</span></span><br><span class="line">viewmodel_fov <span class="string">&quot;54&quot;</span></span><br><span class="line">viewmodel_offset_x <span class="string">&quot;2.5&quot;</span></span><br><span class="line">viewmodel_offset_y <span class="string">&quot;-2&quot;</span></span><br><span class="line">viewmodel_offset_z <span class="string">&quot;-2&quot;</span></span><br><span class="line">viewmodel_presetpos <span class="string">&quot;0&quot;</span></span><br><span class="line">viewmodel_recoil <span class="string">&quot;1.0&quot;</span></span><br><span class="line">cl_bob_lower_amt <span class="string">&quot;21&quot;</span></span><br><span class="line">cl_bobamt_lat <span class="string">&quot;0.33&quot;</span></span><br><span class="line">cl_bobamt_vert <span class="string">&quot;0.14&quot;</span></span><br><span class="line">cl_bobcycle <span class="string">&quot;0.98&quot;</span></span><br><span class="line">cl_righthand <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><h2 id="灵敏度"><a href="#灵敏度" class="headerlink" title="灵敏度"></a>灵敏度</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sensitivity <span class="string">&quot;1.25&quot;</span></span><br></pre></td></tr></table></figure><h2 id="net-graph"><a href="#net-graph" class="headerlink" title="net_graph"></a>net_graph</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net_graph</span><br><span class="line">net_graph <span class="string">&quot;1&quot;</span></span><br><span class="line">net_graphpos <span class="string">&quot;1&quot;</span></span><br><span class="line">net_graphproportionalfont <span class="string">&quot;0&quot;</span></span><br></pre></td></tr></table></figure><h2 id="键位"><a href="#键位" class="headerlink" title="键位"></a>键位</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bind <span class="string">&quot;MOUSE3&quot;</span> <span class="string">&quot;+voicerecord&quot;</span></span><br><span class="line">bind <span class="string">&quot;t&quot;</span> <span class="string">&quot;+voicerecord&quot;</span><span class="comment">//麦克风</span></span><br><span class="line">bind <span class="string">&quot;f&quot;</span> <span class="string">&quot;+lookatweapon;r_cleardecals&quot;</span><span class="comment">//看枪清血迹</span></span><br><span class="line">bind <span class="string">&quot;z&quot;</span> <span class="string">&quot;+spray_menu&quot;</span><span class="comment">//喷漆</span></span><br><span class="line">bind <span class="string">&quot;n&quot;</span> <span class="string">&quot;noclip&quot;</span><span class="comment">//飞行</span></span><br><span class="line">bind <span class="string">&quot;x&quot;</span> <span class="string">&quot;toggle cl_crosshair_drawoutline 1 0;toggle toggle cl_crosshair_dynamic_splitdist 6 5;toggle cl_crosshair_friendly_warning 1 2;toggle cl_crosshair_outlinethickness 2 1;toggle cl_crosshair_sniper_width 1;toggle cl_crosshairgap -2 -7;toggle cl_crosshairgap_useweaponvalue 0;toggle cl_crosshairsize -0.3 1000;toggle cl_crosshairthickness 1.5 3.5;toggle cl_fixedcrosshairgap -100 -7&quot;</span><span class="comment">//准星切换</span></span><br><span class="line">BindToggle <span class="string">&quot;v&quot;</span> <span class="string">&quot;cl_righthand&quot;</span><span class="comment">//换视角</span></span><br><span class="line">bind <span class="string">&quot;=&quot;</span> <span class="string">&quot;sv_rethrow_last_grenade&quot;</span><span class="comment">//重扔手雷</span></span><br><span class="line">BindToggle <span class="string">&quot;-&quot;</span> <span class="string">&quot;bot_mimic&quot;</span><span class="comment">//机器人学动作</span></span><br><span class="line">bind <span class="string">&quot;p&quot;</span> <span class="string">&quot;bot_place&quot;</span></span><br><span class="line"></span><br><span class="line">alias +jumpthrow <span class="string">&quot;+jump;-attack&quot;</span></span><br><span class="line">alias -jumpthrow <span class="string">&quot;-jump&quot;</span></span><br><span class="line">bind <span class="string">&quot;space&quot;</span> <span class="string">&quot;+jumpthrow&quot;</span><span class="comment">//跳投</span></span><br><span class="line"></span><br><span class="line">bind <span class="string">&quot;MWHEELUP&quot;</span> <span class="string">&quot;+jump&quot;</span></span><br><span class="line">bind <span class="string">&quot;MWHEELDOWN&quot;</span> <span class="string">&quot;+jump&quot;</span><span class="comment">//滚轮跳</span></span><br><span class="line"></span><br><span class="line">alias +cjump <span class="string">&quot;+jump; +duck&quot;</span> </span><br><span class="line">alias -cjump <span class="string">&quot;-jump; -duck&quot;</span> </span><br><span class="line">bind <span class="string">&quot;MOUSE5&quot;</span> <span class="string">&quot;+cjump&quot;</span></span><br><span class="line">bind <span class="string">&quot;alt&quot;</span> <span class="string">&quot;+cjump&quot;</span><span class="comment">//大跳</span></span><br></pre></td></tr></table></figure><h2 id="音量"><a href="#音量" class="headerlink" title="音量"></a>音量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volume <span class="string">&quot;1&quot;</span></span><br><span class="line">voice_scale <span class="string">&quot;0.3&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Video-txt"><a href="#Video-txt" class="headerlink" title="Video.txt"></a>Video.txt</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;VideoConfig&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;setauto.cpu_level&quot;</span>        <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="string">&quot;setauto.gpu_level&quot;</span>        <span class="string">&quot;3&quot;</span></span><br><span class="line">    <span class="string">&quot;setauto.mat_antialias&quot;</span>        <span class="string">&quot;8&quot;</span></span><br><span class="line">    <span class="string">&quot;setauto.mat_aaquality&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="string">&quot;setauto.mat_forceaniso&quot;</span>        <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_vsync&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_triplebuffered&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_grain_scale_override&quot;</span>        <span class="string">&quot;-1.000000&quot;</span></span><br><span class="line">    <span class="string">&quot;setauto.gpu_mem_level&quot;</span>        <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mem_level&quot;</span>        <span class="string">&quot;2&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_queue_mode&quot;</span>        <span class="string">&quot;-1&quot;</span></span><br><span class="line">    <span class="string">&quot;setauto.csm_quality_level&quot;</span>        <span class="string">&quot;3&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_software_aa_strength&quot;</span>        <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_motion_blur_enabled&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.mat_texturestreaming&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.defaultres&quot;</span>        <span class="string">&quot;1280&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.defaultresheight&quot;</span>        <span class="string">&quot;1024&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.aspectratiomode&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.fullscreen&quot;</span>        <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="string">&quot;setting.nowindowborder&quot;</span>        <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="train-cfg"><a href="#train-cfg" class="headerlink" title="train.cfg"></a>train.cfg</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sv_cheats <span class="number">1</span></span><br><span class="line">mp_autoteambalance <span class="number">0</span></span><br><span class="line">mp_roundtime_defuse <span class="number">60</span></span><br><span class="line"><span class="comment">//mp_roundtime 60</span></span><br><span class="line">mp_freezetime <span class="number">0</span></span><br><span class="line">mp_maxmoney <span class="number">999999999</span></span><br><span class="line">mp_startmoney <span class="number">999999999</span></span><br><span class="line">mp_buytime <span class="number">3600</span></span><br><span class="line">mp_buy_anywhere <span class="number">1</span></span><br><span class="line">mp_respawn_on_death_ct <span class="number">1</span></span><br><span class="line"><span class="keyword">mp_respawn_on_death_t</span> <span class="number">1</span></span><br><span class="line">mp_respawnwavetime_ct <span class="number">1</span></span><br><span class="line"><span class="keyword">mp_respawnwavetime_t</span> <span class="number">1</span></span><br><span class="line">mp_ignore_round_win_conditions <span class="number">1</span></span><br><span class="line">mp_forcecamera <span class="number">0</span>               <span class="comment">//不限制观察者所观看的队伍</span></span><br><span class="line">sv_alltalk <span class="number">1</span>               <span class="comment">//开启全局语音</span></span><br><span class="line">mp_restartgame <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="t-grenade-cfg"><a href="#t-grenade-cfg" class="headerlink" title="t_grenade.cfg"></a>t_grenade.cfg</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mp_drop_knife_enable <span class="number">1</span></span><br><span class="line">give weapon_knife_karambit</span><br><span class="line">ent_fire weapon_knife addoutput <span class="string">&quot;classname weapon_knifegg&quot;</span></span><br><span class="line">sv_cheats <span class="number">1</span></span><br><span class="line">sv_infinite_ammo <span class="number">2</span></span><br><span class="line">sv_grenade_trajectory <span class="number">1</span></span><br><span class="line">sv_showimpacts <span class="number">1</span></span><br><span class="line">give weapon_flashbang</span><br><span class="line">give weapon_smokegrenade</span><br><span class="line">give weapon_molotov</span><br><span class="line">give weapon_hegrenade</span><br><span class="line">cl_showpos <span class="number">1</span></span><br><span class="line">bot_stop <span class="number">1</span></span><br><span class="line">bot_kick</span><br><span class="line">bot_add_ct</span><br><span class="line">bot_add_ct</span><br><span class="line">bot_add_ct</span><br><span class="line">bot_add_ct</span><br><span class="line">god <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="t-shootThrough-cfg"><a href="#t-shootThrough-cfg" class="headerlink" title="t_shootThrough.cfg"></a>t_shootThrough.cfg</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mp_drop_knife_enable <span class="number">1</span></span><br><span class="line">give weapon_knife_karambit</span><br><span class="line">ent_fire weapon_knife addoutput <span class="string">&quot;classname weapon_knifegg&quot;</span></span><br><span class="line">sv_cheats <span class="number">1</span></span><br><span class="line">sv_infinite_ammo <span class="number">2</span></span><br><span class="line">sv_grenade_trajectory <span class="number">1</span></span><br><span class="line">sv_showimpacts <span class="number">1</span></span><br><span class="line">cl_showpos <span class="number">1</span></span><br><span class="line">bind <span class="string">&quot;[&quot;</span> <span class="string">&quot;toggle r_drawothermodels 1 2&quot;</span></span><br><span class="line">bot_stop <span class="number">1</span></span><br><span class="line">bot_kick</span><br><span class="line">bot_add_ct</span><br><span class="line">bot_add_ct</span><br><span class="line">bot_add_ct</span><br><span class="line">bot_add_ct</span><br><span class="line">god <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="t-bunnyhop-cfg"><a href="#t-bunnyhop-cfg" class="headerlink" title="t_bunnyhop.cfg"></a>t_bunnyhop.cfg</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mp_drop_knife_enable <span class="number">1</span></span><br><span class="line">give weapon_knife_karambit</span><br><span class="line">ent_fire weapon_knife addoutput <span class="string">&quot;classname weapon_knifegg&quot;</span></span><br><span class="line">sv_cheats <span class="number">1</span></span><br><span class="line">cl_showpos <span class="number">1</span></span><br><span class="line">bot_stop <span class="number">1</span></span><br><span class="line">bot_kick</span><br><span class="line">sv_enablebunnyhopping <span class="number">1</span></span><br><span class="line">sv_airaccelerate <span class="number">4000</span></span><br><span class="line">god <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="knives-cfg"><a href="#knives-cfg" class="headerlink" title="knives.cfg"></a>knives.cfg</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sv_cheats <span class="number">1</span></span><br><span class="line">mp_drop_knife_enable <span class="number">1</span></span><br><span class="line">give weapon_bayonet</span><br><span class="line">give weapon_knife_flip</span><br><span class="line">give weapon_knife_gut</span><br><span class="line">give weapon_knife_karambit</span><br><span class="line">give weapon_knife_m9_bayonet</span><br><span class="line">give weapon_knife_tactical</span><br><span class="line">give weapon_knife_butterfly</span><br><span class="line">give weapon_knife_falchion</span><br><span class="line">give weapon_knife_push</span><br><span class="line">give weapon_knife_survival_bowie</span><br><span class="line">give weapon_knife_ursus</span><br><span class="line">give weapon_knife_gypsy_jackknife</span><br><span class="line">give weapon_knife_stiletto</span><br><span class="line">give weapon_knife_widowmaker</span><br><span class="line">give weapon_knife_ghost</span><br><span class="line">give weapon_knife_canis</span><br><span class="line">give weapon_knife_cord</span><br><span class="line">give weapon_knife_outdoor</span><br><span class="line">give weapon_knife_skeleton</span><br><span class="line">ent_fire weapon_knife addoutput <span class="string">&quot;classname weapon_knifegg&quot;</span></span><br></pre></td></tr></table></figure><h2 id="下载所有cfg"><a href="#下载所有cfg" class="headerlink" title="下载所有cfg"></a>下载所有cfg</h2><p><a href="/../../img/cfg.zip">点击下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS:GO </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贰〇贰〇暮春柒日记</title>
      <link href="/%E2%95%96%D0%B1%D0%B9%D0%A6%E2%95%96%D0%B1%D0%B9%D0%A6%E2%94%80%E2%95%91%E2%94%A4%E2%95%91%E2%95%9E%D1%82%E2%95%9A%E2%95%92%E2%95%9D%E2%95%9F/"/>
      <url>/%E2%95%96%D0%B1%D0%B9%D0%A6%E2%95%96%D0%B1%D0%B9%D0%A6%E2%94%80%E2%95%91%E2%94%A4%E2%95%91%E2%95%9E%D1%82%E2%95%9A%E2%95%92%E2%95%9D%E2%95%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>还要多远才能进入你的心<br>还要多久才能和你接近<br>咫尺远近却无法靠近的那个人<br>也等着和你相遇<br>环游的行星 怎么可以<br>拥有你</p></blockquote><a id="more"></a>        <div id="aplayer-vwnrbchc" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-vwnrbchc"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "水星记",              author: "郭顶",              url: "http://music.163.com/song/media/outer/url?id=441491828.mp3",              pic: "http://p2.music.126.net/wSMfGvFzOAYRU_yVIfquAA==/2946691248081599.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>我好容易被一些事情影响，去重新拾起一些人和事。这可能是舔狗的本质吧，总是放不下，总是感动着自己……我去把以前的聊天记录翻完了，竟有一种不该有的怀念和自责，责怪我没有好好珍惜，怀念以前的时光。其实得不到的永远在骚动，被偏爱的都有恃无恐对我来说也适用吧，我总是去追求得不到的，却忽略了身边的人。</p><p>我突然明白了，我需要的不是一腔对爱情的追求，我发现我需要让理智抢占高地，让自己永远保持在那个所谓的”贤者时间”。爱情需要理智地思考，而不是用感情说事，即使我很珍惜这一切，不该有的感情，就放下吧。 </p><p>对了，最近总是为别人解决一些所谓的感情问题，奇奇怪怪的问题。我发现我总是能解决地很好，我也不知道为什么，为什么我没有经历过一段正式的爱情，却能引起我自己和他们的共鸣。是我经历了太多不算爱情的爱情吗？</p><p>最近在听郭顶的歌，让我想起一个女生，一个很美好的女生，一个匆匆和我擦肩而过却在我心里留下许多印记的女生。她很优秀，却有些自卑。其实很奇怪，我心里她的形象是活泼可爱和温文尔雅并存的，我不知道是怎么来的这样的印象，但是她真的很美好，能让我在日后的生活中回想起她时，心中不自觉地涌入一抹温暖。</p><p>天气暖起来了，希望疫情也能快快过去，大家一起共勉鸭！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 一点悲伤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毒霸劫持了我的浏览器！</title>
      <link href="/%E2%95%A2%E2%95%9B%E2%96%91%E2%95%98%E2%95%9C%E2%94%98%E2%94%82%E2%95%93%E2%94%B4%E2%95%A6%E2%95%AC%E2%95%A5%E2%95%A1%E2%94%80%D1%84%D0%BF%E2%94%94%E2%94%94%E2%95%9E%D1%9E/"/>
      <url>/%E2%95%A2%E2%95%9B%E2%96%91%E2%95%98%E2%95%9C%E2%94%98%E2%94%82%E2%95%93%E2%94%B4%E2%95%A6%E2%95%AC%E2%95%A5%E2%95%A1%E2%94%80%D1%84%D0%BF%E2%94%94%E2%94%94%E2%95%9E%D1%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>某日，小厉在编程时，突然某个流氓软件跳出来了一个弹窗，问我要不要锁定浏览器主页，我点了不要。<br>然后……浏览器就被劫持成了毒霸。</p></blockquote><a id="more"></a><h1 id="前言-About杀软"><a href="#前言-About杀软" class="headerlink" title="前言:About杀软"></a>前言:About杀软</h1><p>首先，我没有在电脑上装毒霸的软件，我发现驱动精灵是毒霸家的产品之后，我就把驱动精灵删掉了。我对毒霸、360等安全软件十分反感。我本来没有打算在我的电脑上装杀软的，毕竟程序员，他把我编出的程序叫做病毒，还给我删了，我肯定不爽，而且杀软各种劫持捆绑，实在是受不了。</p><p>但是最近我用电脑用久之后弹窗越来越多了，所以我装了一个火绒来拦截弹窗，火绒是我认为最干净的杀软了。</p><p>但是用火绒的浏览器主页锁定没法修改回来，因为毒霸他不是靠普通的修改浏览器劫持的，问题不是出在浏览器上。在查阅大量资料之后我发现毒霸是用了hook实时检查浏览器的动向控制主页，这就是流氓软件，太牛了。这也成了我完美解决这个问题的关键。</p><h1 id="探索出的解决方法一-曲线救国"><a href="#探索出的解决方法一-曲线救国" class="headerlink" title="探索出的解决方法一(曲线救国):"></a>探索出的解决方法一(曲线救国):</h1><p>我发现，在我从Chrome安装文件夹直接打开exe文件时他是不会出现劫持现象的。可是我从快捷方式打开就会出现劫持，我不可能每次都从安装文件夹里打开（不过你可以设置一个快捷键按下就打开Chrome，也是不错的）。</p><p>那么这个方法的核心就是更改快捷方式打开的文件，我们进入安装文件夹，把chrome.exe复制一份，把名字改了，这里我改成了chrome_.exe，然后再将这个副本发送到桌面快捷方式，这样打开就不会被劫持了</p><p><img src="https://s2.ax1x.com/2019/11/03/KO0AR1.png" alt="复制一个副本"></p><h1 id="方法二-完美解决"><a href="#方法二-完美解决" class="headerlink" title="方法二(完美解决):"></a>方法二(完美解决):</h1><p>在前文我说了我发现毒霸劫持的原理是用hook实时监测浏览器，所以才导致就算卸载重装chrome也没有用。</p><p>这里我使用了一个叫做PCHunter(<a href="http://www.xuetr.com/download/PCHunter_free.zip">下载链接</a>)的软件来监测钩子。在我一个个翻找之后，我发现了一个叫做<strong>kbasesrv</strong>的钩子，这不是毒霸的服务吗？于是我到了它的安装路径<code>C:\Program Files (x86)\kbasesrv</code>，果不其然，这就是毒霸的根据地！于是我点开了那个uninstall.exe，终于，他没了！！！这玩意卸载了居然还有几个.dll文件，我顺便用火绒强制粉碎了他们。终于，打开浏览器，又是我熟悉的新标签页了！！</p><p><img src="https://s2.ax1x.com/2019/11/03/KOBhB8.png" alt="熟悉的Chrome！！！"></p><p><i style="font-size: 20px;color: pink">毒霸还是斗不过执着的程序员啊</i></p><p>以上</p>]]></content>
      
      
      
        <tags>
            
            <tag> Daily </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(更新中)[C++]大整数算法</title>
      <link href="/C-%E2%94%A4%D1%94%E2%95%92%E2%88%9A%E2%95%A9%C2%A4%E2%95%A6%D1%83%E2%95%96%D0%B8/"/>
      <url>/C-%E2%94%A4%D1%94%E2%95%92%E2%88%9A%E2%95%A9%C2%A4%E2%95%A6%D1%83%E2%95%96%D0%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class = "fa fa-quote-left fa-3x fa-pull-left"></i>在各种语言中，很多东西都是不一样的，但是数字大小限制都是一样的。也就是说，溢出，是一个让所有程序员都头疼的东西。<br>大整数加减法，也就是为了解决过大的数字无法计算而生的。这里，我以一本通中的<a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1168">1168</a>、<a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1169">1169</a>题做例子，做一下C++中的大整数加减法。<br><a id="more"></a></p></blockquote><h1 id="大整数加法"><a href="#大整数加法" class="headerlink" title="大整数加法"></a>大整数加法</h1><p><img src="https://s2.ax1x.com/2019/11/16/M0LXwD.png" alt="1168:大整数加法"></p><h2 id="头文件引用以及定义等"><a href="#头文件引用以及定义等" class="headerlink" title="头文件引用以及定义等"></a>头文件引用以及定义等</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;//绝不用万能头！</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;//No More cin&amp;cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h2 id="Step-One-输入"><a href="#Step-One-输入" class="headerlink" title="Step One:输入"></a>Step One:输入</h2><p>我们在这里用字符串进行输入储存，用<code>gets()</code>函数进行输入,并且获取其长度。<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> in_a[MAX],in_b[MAX];</span><br><span class="line">gets(in_a);</span><br><span class="line">gets(in_b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lena = <span class="built_in">strlen</span>(in_a),lenb = <span class="built_in">strlen</span>(in_b);</span><br></pre></td></tr></table></figure><h2 id="Step-Two-数据转存"><a href="#Step-Two-数据转存" class="headerlink" title="Step Two:数据转存"></a>Step Two:数据转存</h2><p>由于希望直接加减计算，我们将字符串数组倒序转存到初始化为零的整型数组当中。<br>倒序转存是为了我们从个位算起更方便。<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAX],b[MAX];</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lena;i++)</span><br><span class="line">    a[lena - i] = in_a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lenb;i++)</span><br><span class="line">    b[lenb - i] = in_b[i];</span><br></pre></td></tr></table></figure><p><strong>要注意，我们转存后的<code>a</code>和<code>b</code>是从<code>a[1]</code>和<code>b[1]</code>开始的。</strong></p><h2 id="Step-Three-加法主程序"><a href="#Step-Three-加法主程序" class="headerlink" title="Step Three:加法主程序"></a>Step Three:加法主程序</h2><p>首先，我们需要定义一个数组来储存结果、两个变量分别储存进位和结果的长度。<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c[MAX],flag = <span class="number">0</span>;lenc = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br></pre></td></tr></table></figure><p>然后，开始加减。<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(lenc &lt;= lena||lenc &lt;= lenb)<span class="comment">//循环条件是结果的长度不长于原数的长度</span></span><br><span class="line">&#123;</span><br><span class="line">    c[lenc] = a[lenc] + b[lenc] + flag;<span class="comment">//加起来</span></span><br><span class="line">    flag = c[lenc]/<span class="number">10</span>;<span class="comment">//储存进位</span></span><br><span class="line">    c[lenc] %= <span class="number">10</span>;<span class="comment">//储存本位</span></span><br><span class="line">    lenc++;<span class="comment">//计数加一</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成加的操作后，最后第一位可能会再进一位，此时我们就需要判断是否需要进位。<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">    c[lenc] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    lenc--;</span><br></pre></td></tr></table></figure><h2 id="Step-Four-输出"><a href="#Step-Four-输出" class="headerlink" title="Step Four:输出"></a>Step Four:输出</h2><p>要注意，我们的数组是倒序的，所以需要倒序输出。<br>代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = lenc;i &gt; <span class="number">0</span>;i--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><p><a href="https://github.com/timlzh/CppProgrammingFiles/blob/master/New-BigDataCalculation.cpp">gayhub链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;//绝不用万能头！</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;//No More cin&amp;cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> in_a[MAX],in_b[MAX];</span><br><span class="line">    <span class="keyword">int</span> a[MAX],b[MAX],c[MAX];</span><br><span class="line">    <span class="keyword">int</span> lena,lenb,lenc;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">    <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</span><br><span class="line"></span><br><span class="line">    gets(in_a);</span><br><span class="line">    gets(in_b);</span><br><span class="line"></span><br><span class="line">    lena = <span class="built_in">strlen</span>(in_a);</span><br><span class="line">    lenb = <span class="built_in">strlen</span>(in_b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lena;i++)</span><br><span class="line">        a[lena-i] = in_a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; lenb;i++)</span><br><span class="line">        b[lenb-i] = in_b[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt;= lena || lenc &lt;= lenb)</span><br><span class="line">    &#123;</span><br><span class="line">        c[lenc] = a[lenc] + b[lenc] + flag;</span><br><span class="line">        flag = c[lenc]/<span class="number">10</span>;</span><br><span class="line">        c[lenc] %= <span class="number">10</span>;</span><br><span class="line">        lenc++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        c[lenc] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        lenc--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = lenc;i &gt; <span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[lenc]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><p style="font-size: 18px;color: #00b7ff">到此，加法完成！</p></strong></p><h1 id="大整数减法"><a href="#大整数减法" class="headerlink" title="大整数减法"></a>大整数减法</h1><p>Step One:输入</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习(2):标识符、字面值</title>
      <link href="/Java%E2%95%A4%D0%B7%E2%95%A7%E2%96%912/"/>
      <url>/Java%E2%95%A4%D0%B7%E2%95%A7%E2%96%912/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>关于Java语言中的标识符<br><a id="more"></a></p></blockquote><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><h2 id="什么是标识符？"><a href="#什么是标识符？" class="headerlink" title="什么是标识符？"></a>什么是标识符？</h2><font color = "orange" style = "font-size: 16px">**在Java源程序当中凡是程序员有权利自己命名的单词都是标识符**</font>  <p>标识符可以标识什么元素呢  </p><ul><li>类名</li><li>方法名</li><li>变量名</li><li>接口名</li><li>常量名</li><li>……等等</li></ul><h2 id="标识符的命名规则？"><a href="#标识符的命名规则？" class="headerlink" title="标识符的命名规则？"></a>标识符的命名规则？</h2><blockquote><p>如果不按照命名规则来，编译器会报错，这是规定语法</p></blockquote><ol><li>一个合法的标识符只能由”数字、字母、下划线(_)、美元符号($)”组成</li><li>标识符不能以数字开头</li><li>标识符要严格区分大小写</li><li>关键字(public class static void等等)不能做标识符</li><li>理论上标识符无长度限制，但是最好不要太长</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">合法</th><th style="text-align:center">不合法</th></tr></thead><tbody><tr><td style="text-align:center">_123Test</td><td style="text-align:center">123Test</td></tr><tr><td style="text-align:center">HelloWorld</td><td style="text-align:center">HelloWorld!</td></tr><tr><td style="text-align:center">HelloWorld_</td><td style="text-align:center">HelloWorld#</td></tr><tr><td style="text-align:center">A_B_C</td><td style="text-align:center">A B C</td></tr><tr><td style="text-align:center">$ABC</td><td style="text-align:center">1ABC</td></tr><tr><td style="text-align:center">class1</td><td style="text-align:center">class</td></tr></tbody></table></div><h2 id="标识符的命名规范"><a href="#标识符的命名规范" class="headerlink" title="标识符的命名规范"></a>标识符的命名规范</h2><blockquote><p>命名规范不是规则，可以不遵守，不遵守也不会报错</p></blockquote><ol><li>最好见名知意<ul><li><del>a123</del>、<del>b456</del>、<del>c789</del></li><li>SystemService、studentNumber、lineHeight</li></ul></li><li>遵守驼峰命名法<ul><li>类名、接口名:首字母大写，后面每个单词首字母大写。</li><li>变量名、方法名:首字母小写，后面每个单词首字母大写</li><li>常量名:全部大写</li><li>SystemService、CustomService、studentNumber、lineHeight、PI、MAXSIZE</li></ul></li></ol><h1 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h1><h2 id="什么是字面值"><a href="#什么是字面值" class="headerlink" title="什么是字面值"></a>什么是字面值</h2><font color = "orange" style = "font-size: 16px">**字面值就是数据**</font>  <p>如:</p><ul><li>1、2、3、4、5……</li><li>3.1415926</li><li>“ABcd”</li><li>‘a’</li><li>true,false</li></ul><font style = "font-size: 16px">字面值是Java源程序的组成部分之一。包括标识符和关键字他们都是Java源程序的组成部分</font> <h2 id="字面值的数据类型"><a href="#字面值的数据类型" class="headerlink" title="字面值的数据类型"></a>字面值的数据类型</h2><ol><li>1、2、3、4、5、6属于整数型字面值</li><li>3.1415926属于浮点型字面值</li><li>true、false属于布尔型字面值</li><li>“abc”、”中国人”属于字符串型字面值</li><li>‘a’、’人’属于字符型字面值</li></ol><p>注意:</p><ul><li>Java语言中所有的字符串类型必须用双引号括起来</li><li>Java语言中所有的字符类型必须用单引号括起来</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习(1):从Java特性到&quot;Hello World!&quot;程序</title>
      <link href="/Java%E2%95%A4%D0%B7%E2%95%A7%E2%96%911/"/>
      <url>/Java%E2%95%A4%D0%B7%E2%95%A7%E2%96%911/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class = "fa fa-quote-left fa-3x fa-pull-left"></i>Java是一门后端程序员必须会的语言，在计算机历史中，它的各种独特的特性在计算机历史上留下了浓墨重彩的一笔。它的跨平台特性更是方便了广大的程序员朋友。<br>那么，从今天开始，我们就开始学习Java这门厉害的语言吧!<br><a id="more"></a></p></blockquote><h1 id="Java特性"><a href="#Java特性" class="headerlink" title="Java特性"></a>Java特性</h1><ol><li>简单性：Java舍弃了C++中难以掌握不安全的功能如：指针、多继承等(Java语言底层是C++实现的)  </li><li>面向对象：Java和C++一样，是一种面向对象编程语言</li><li>安全性：如：运行时堆栈溢出，强制类型检查</li><li>健壮性：Java语言在运行过程中产生的垃圾会自动回收,简称GC机制</li><li>可移植性： Java程序编译一次,不做任何修改时到处运行,也就是跨平台（通过JVM实现）</li></ol><h1 id="JDK、JRE、JVM是什么"><a href="#JDK、JRE、JVM是什么" class="headerlink" title="JDK、JRE、JVM是什么"></a>JDK、JRE、JVM是什么</h1><ol><li>JDK：Java开发工具包，如果想开发Java程序则必须安装JDK,目前使用JDK12</li><li>JRE:java运行环境</li><li>JVM:Java虚拟机，如果想在操作系统上运行字节码文件，则必须有JVM</li></ol><h1 id="编写第一个Java程序”Hello-World”"><a href="#编写第一个Java程序”Hello-World”" class="headerlink" title="编写第一个Java程序”Hello World”"></a>编写第一个Java程序”Hello World”</h1><blockquote><p>我所使用的Java文件编辑器是VSCode，具体如何部署VSCode以用来编Java文件，请参考<a href="https://code.visualstudio.com/docs/java/java-tutorial">官网链接</a></p></blockquote><ol><li><p>在自己的工作区目录下创建Java代码文件<br> 在java中，代码文件应命名为XXX.java.这里我的文件名称为:HelloWorld.java</p></li><li><p>编写HelloWorld.java<br> 代码如下:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="简单解释代码的意思"><a href="#简单解释代码的意思" class="headerlink" title="简单解释代码的意思"></a>简单解释代码的意思</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//public表示公开的</span></span><br><span class="line"><span class="comment">//class表示定义一个类</span></span><br><span class="line"><span class="comment">//HelloWorld表示一个类名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;<span class="comment">//表示定义一个公开的类，叫做HelloWorld</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public表示公开的</span></span><br><span class="line"><span class="comment">        static表示静态的</span></span><br><span class="line"><span class="comment">        void表示空</span></span><br><span class="line"><span class="comment">        main表示方法名是main</span></span><br><span class="line"><span class="comment">        (String[] args) 是一个main方法的形式参数列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//类体中不允许编写Java语句[除声明变量外]</span></span><br><span class="line">    <span class="comment">/*需要记住的是:</span></span><br><span class="line"><span class="comment">        以下的方法是一个程序的主方法，是程序的执行入口</span></span><br><span class="line"><span class="comment">        是规定的，固定的编写方式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;<span class="comment">//表示定义一个公开的静态的主方法</span></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法体</span></span><br><span class="line"><span class="comment">        方法体</span></span><br><span class="line"><span class="comment">        方法体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//java语句[java语句以&quot;;&quot;终止，分号必须是半角英语分号]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);<span class="comment">//向控制台输出一段信息、消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux(1):Kali Linux的安装(基于VMWare虚拟机)</title>
      <link href="/Kali%20Linux-1-Kali-Linux%E2%95%A1%E2%94%80%E2%96%91%E2%96%93%E2%95%AB%E2%96%91-%E2%95%97%E2%88%99%E2%95%99%E2%94%8CVMWare%E2%95%A8%D1%89%E2%94%80%D1%82%E2%95%97%C2%B7/"/>
      <url>/Kali%20Linux-1-Kali-Linux%E2%95%A1%E2%94%80%E2%96%91%E2%96%93%E2%95%AB%E2%96%91-%E2%95%97%E2%88%99%E2%95%99%E2%94%8CVMWare%E2%95%A8%D1%89%E2%94%80%D1%82%E2%95%97%C2%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>   <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class="fa fa-quote-left fa-3x fa-pull-left"></i>俗话说的好:”Kali用的好，局子进的早”Kali Linux是每个网络黑客需要学会的东西。它附带了很多渗透、攻防工具。<br>Kali Linux，看名字就知道是一种Linux的发行版。学Kali Linux最好有Linux基础，否则学起来会有点吃力。所以可以先去看看Linux的教程，再来学Kali Linux。<br><a id="more"></a></p></blockquote><h1 id="Kali-Linux的安装-基于VMWare虚拟机"><a href="#Kali-Linux的安装-基于VMWare虚拟机" class="headerlink" title="Kali Linux的安装(基于VMWare虚拟机)"></a>Kali Linux的安装(基于VMWare虚拟机)</h1><h2 id="VMWare-Workstation-Pro-15下载与安装"><a href="#VMWare-Workstation-Pro-15下载与安装" class="headerlink" title="VMWare Workstation Pro 15下载与安装"></a>VMWare Workstation Pro 15下载与安装</h2><p>首先，当然要去下载VMWare。我使用的是VMWare Workstation Pro 15。<br>(这里附上CSDN论坛的<a href="https://blog.csdn.net/felix__h/article/details/82853501">破解版链接</a>，但是有钱的用户当然推荐去支持正版)<br>VMWare15的安装过程就略过了</p><h2 id="Kali-Linux镜像下载"><a href="#Kali-Linux镜像下载" class="headerlink" title="Kali Linux镜像下载"></a>Kali Linux镜像下载</h2><p>接下来你需要一个Kali Linux的镜像<br><a href="https://www.kali.org/downloads/">Kali Linux官网下载链接</a>(根据你自己的系统位数下载)</p><h2 id="Kali-Linux-安装"><a href="#Kali-Linux-安装" class="headerlink" title="Kali Linux 安装"></a>Kali Linux 安装</h2><ul><li><strong>打开VMWare</strong></li><li><img src="https://s2.ax1x.com/2019/08/20/mGi3pd.png" alt="创建新的虚拟机"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGi27T.png" alt="选择典型"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGiz3d.png" alt="选择Kali Linux镜像"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGFwb6.png" alt="选择Debian9.x 64位(32位就选Debian9.x)"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGFgxA.png" alt="自己命名并选择路径"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGFTPg.png" alt="选择合适的磁盘大小和储存方式"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGFxaT.png" alt="不要急着完成，点击自定义硬件"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGkAqx.png" alt="选择合适的内存大小(建议大于1G)"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGkNFS.png" alt="选择合适的处理器个数"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGkfSJ.png" alt="重要！网络选择桥接模式，并勾选复制状态"></li><li><strong>现在就可以启虚拟机了</strong></li><li><img src="https://s2.ax1x.com/2019/08/20/mGAElj.png" alt="上下键选择到Graphical Install，回车"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGAwtO.png" alt="选择中文简体，继续"></li><li><strong>之后按下三个继续即可</strong></li><li><img src="https://s2.ax1x.com/2019/08/20/mGAcnI.png" alt="主机名随便设置即可"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGA59g.png" alt="域名不用填"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGAOEV.png" alt="设置用户密码"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGEQbt.png" alt="使用整个硬盘"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGEfq1.png" alt="之后按下几个继续后到这个界面，选择是"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGVfSg.png" alt="开始安装系统"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGmGes.png" alt="选择否"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGukVA.png" alt="选择是"></li><li><img src="https://s2.ax1x.com/2019/08/20/mGuQbj.png" alt="选择第二个"></li></ul><p><strong>至此，Kali的安装完成</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Kali Linux </tag>
            
            <tag> Linux </tag>
            
            <tag> Haker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git&amp;Github学习</title>
      <link href="/Git-Github%E2%95%A4%D0%B7%E2%95%A7%E2%96%91/"/>
      <url>/Git-Github%E2%95%A4%D0%B7%E2%95%A7%E2%96%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class = "fa fa-quote-left fa-3x fa-pull-left"></i>Git和Github是所有程序员都需要了解并且会使用的工具，它们能很好地让你对软件/代码的版本进行控制、多人协同编辑代码、代码开源、代码发布等等。<del>Github也是世界上最大的同性交友平台</del>，无论如何，Git和Github都是一个合格的程序员需要了解的东西。那么今天就开始Git&amp;Github的探索之旅<br><a id="more"></a></p></blockquote><h1 id="Github学习"><a href="#Github学习" class="headerlink" title="Github学习"></a>Github学习</h1><h2 id="版本控制应该具有的功能"><a href="#版本控制应该具有的功能" class="headerlink" title="版本控制应该具有的功能"></a>版本控制应该具有的功能</h2><ul><li>协同修改<ul><li>多人并行且不冲突地修改服务器端的同一个文件</li></ul></li><li>数据备份<ul><li>不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态</li></ul></li><li>版本管理<ul><li>在保存每一个版本的文件信息的时候要做到不重复保存数据，以节约储存空间，提高运行效率。这方面SVN采用的是增量式管理的方式(只保存修改的部分)，而Github采用的是文件系统快照的方式。</li></ul></li><li>权限控制<ul><li>对团队中参与的开发的人员进行权限控制</li><li>对团队外开发者贡献的代码进行审核——Github独有的功能</li></ul></li><li>历史记录<ul><li>查看修改人、时间、内容、日志信息</li><li>将本地文件恢复到某一个历史状态</li></ul></li><li>分支管理<ul><li>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率</li></ul></li></ul><h2 id="版本控制简介"><a href="#版本控制简介" class="headerlink" title="版本控制简介"></a>版本控制简介</h2><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>工程设计领域中使用版本控制管理工程蓝图的设计过程。在IT开发过程中也可以使用版本控制思想管理代码的版本更迭。</p><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><p>版本控制工具主要分为两类，一类是集中式的版本控制工具，还有一类是分布式版本控制工具。</p><ol><li>集中式版本控制工具:<br>CVS、SVN(使用的最多)、VSS<br><img src="https://s2.ax1x.com/2019/08/16/mZ6S0g.png" alt="集中式版本控制工具示意图"><br>(容易出现单点故障——服务器宕机等，数据丢失)</li><li>分布式版本控制工具:<br>Git、Mercurial、Bazaar、Darcs……<br><img src="https://s2.ax1x.com/2019/08/16/mZ6sjf.png" alt="分布式版本控制工具示意图"></li></ol><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><h3 id="Git简史"><a href="#Git简史" class="headerlink" title="Git简史"></a>Git简史</h3><p><img src="https://s2.ax1x.com/2019/08/16/mZcWqO.png" alt="分布式版本控制工具示意图"></p><h3 id="Git官网和Logo"><a href="#Git官网和Logo" class="headerlink" title="Git官网和Logo"></a>Git官网和Logo</h3><p><i class="fa fa-code-fork fa-lg"></i><a href="https://git-scm.com/">官网地址</a>  </p><blockquote><p><i class="fa fa-code-fork fa-lg fa-pull-left"></i>Logo就是一个分支，能看出来Git的主打功能了吧XD</p></blockquote><h3 id="Git的优势"><a href="#Git的优势" class="headerlink" title="Git的优势"></a>Git的优势</h3><ul><li>大部分操作在本地完成，不需要联网</li><li>完整性保证（Hash算法）</li><li>尽可能添加数据而不是删除或修改数据</li><li>分支操作非常流畅</li><li>与Linux命令全面兼容</li></ul><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p><img src="https://s2.ax1x.com/2019/08/16/mZfLVK.png" alt="第一步"><br><img src="https://s2.ax1x.com/2019/08/16/mZfbb6.png" alt="第二步"><br><img src="https://s2.ax1x.com/2019/08/16/mZfX5D.png" alt="第三步"><br><img src="https://s2.ax1x.com/2019/08/16/mZf7K1.png" alt="第四步"><br><img src="https://s2.ax1x.com/2019/08/16/mZfHDx.png" alt="第五步"><br><img src="https://s2.ax1x.com/2019/08/16/mZfOUO.png" alt="第六步"><br><img src="https://s2.ax1x.com/2019/08/16/mZfvPe.png" alt="第七步"></p><h3 id="Git的结构"><a href="#Git的结构" class="headerlink" title="Git的结构"></a>Git的结构</h3><p><img src="https://s2.ax1x.com/2019/08/16/mZo4Xj.png" alt="Git结构示意图">  </p><h3 id="Git和代码托管中心"><a href="#Git和代码托管中心" class="headerlink" title="Git和代码托管中心"></a>Git和代码托管中心</h3><ul><li>互联网环境下<ul><li>Github</li><li>码云</li><li>Coding</li></ul></li><li>本地环境下<ul><li>GitLab服务器</li></ul></li></ul><p>代码托管中心的任务:维护远程库</p><h3 id="本地库与远程库"><a href="#本地库与远程库" class="headerlink" title="本地库与远程库"></a>本地库与远程库</h3><ul><li>团队内部协作<br><img src="https://s2.ax1x.com/2019/08/16/mZLnt1.png" alt="团队内部协作">  </li><li>远程协作<br><img src="https://s2.ax1x.com/2019/08/16/mZLmkR.png" alt="远程内部协作"></li></ul><h2 id="Git的命令行操作"><a href="#Git的命令行操作" class="headerlink" title="Git的命令行操作"></a>Git的命令行操作</h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><p>命令:<code>Git init</code></p><p>效果:创建了一个<code>.git</code>目录</p><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><ul><li>形式:<ul><li>用户名:XXX</li><li>Email地址:1234@XX.com</li></ul></li><li>作用:区分不同的开发人员身份</li><li>注意:这里设置的签名和登录远程库（代码托管中心）的账号密码没有任何关系</li><li>命令<ul><li>项目级别/仓库级别:仅在当前本地库范围内有效<ul><li>git config user.name “XXX”</li><li>git config user.email “1234@XXX.com”</li></ul></li><li>系统用户级别:登录当前操作系统的用户范围<ul><li>git config <font style="color:red"><strong>—global</strong></font> user.name “XXX”</li><li>git config <font style="color:red"><strong>—global</strong></font>   user.email “1234@XXX.com”</li></ul></li><li>级别优先级<ul><li>就近原则:项目级别优先于系统用户级别，二者都有时采用项目级别</li><li>不允许二者都没有</li></ul></li></ul></li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol><li><p>状态查看</p><ul><li><p>```bash<br> git status</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      查看工作区、暂存区状态  </span><br><span class="line"></span><br><span class="line">2. 添加</span><br><span class="line"></span><br><span class="line">   - &#96;&#96;&#96;bash</span><br><span class="line">      git add [file name]</span><br></pre></td></tr></table></figure><p> 将工作区的新建或修改添加到暂存区  </p></li></ul></li><li><p>提交</p><ul><li><p>```bash<br> it commit -m “commit message” [file name]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      将暂存区的东西提交到本地库  </span><br><span class="line"></span><br><span class="line">4. 查看历史记录</span><br><span class="line"></span><br><span class="line">   - &#96;&#96;&#96;bash</span><br><span class="line">     git log</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/16/mmAALd.png" alt="效果示意图"></p><blockquote><p>多屏显示控制方式</p><ul><li>空格向下翻页</li><li>b向上翻页</li><li>q退出</li></ul></blockquote></li><li><p>```bash<br>git log —pretty=oneline</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ![效果示意图](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2019&#x2F;08&#x2F;16&#x2F;mmAksH.png)</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;bash</span><br><span class="line">  git log oneline</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/08/16/mmA5OH.png" alt="效果示意图"></p></li><li><p>```bash<br>git reflog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     ![效果示意图](https:&#x2F;&#x2F;s2.ax1x.com&#x2F;2019&#x2F;08&#x2F;16&#x2F;mmAj1S.png)</span><br><span class="line"></span><br><span class="line">5. 版本的前进后退</span><br><span class="line">   - 法一:基于索引值[推荐]</span><br><span class="line"></span><br><span class="line">     &#96;&#96;&#96;bash</span><br><span class="line">     git reset --hard [索引值]</span><br><span class="line">     (此处的索引值可以用reflog中的缩减版)</span><br></pre></td></tr></table></figure></li><li><p>法二:基于^符号:只能往后退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ (退后一版)</span><br><span class="line">git reset --hard HEAD^^ (退后两版)</span><br><span class="line">git reset --hard HEAD^^^ (退后三版)</span><br></pre></td></tr></table></figure></li><li><p>法三:基于~符号:只能往后退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~n (退后n版)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>reset 命令的三个参数对比</p><ul><li>—soft 参数<ul><li>仅仅在本地库移动 HEAD 指针</li></ul></li><li>—mixed 参数<ul><li>在本地库移动 HEAD 指针</li><li>重置暂存区</li></ul></li><li>—hard 参数<ul><li>在本地库移动 HEAD 指针</li><li>重置暂存区</li><li>重置工作区</li></ul></li></ul></li><li><p>删除文件的恢复</p><ul><li>前提:删除前，文件存在时的状态提交到了本地库</li><li>操作:<code>git reset --hard [指针位置]</code> <ul><li>删除操作已经提交到本地库:指针位置指向历史记录</li><li>删除操作尚未提交到本地库：指针位置使用 HEAD</li></ul></li></ul></li><li><p>比较文件差异</p><ul><li><code>git diff [文件名]</code><ul><li>将工作区中的文件和暂存区进行比较</li></ul></li><li><code>git diff [本地库中历史版本] [文件名]</code><ul><li>将工作区中的文件和本地库历史记录比较</li></ul></li><li><code>git diff</code><ul><li>比较多个文件名</li></ul></li></ul></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ol><li>什么是分支管理<ul><li>在版本控制过程中，使用多条线同时推进多个任务</li></ul></li><li>分支的好处？<ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</li></ul></li><li>分支操作<ul><li>创建分支:<code>git branch [branch name]</code></li><li>查看分支:<code>git branch -v</code></li><li>切换分支:<code>git checkout [branch name]</code></li><li>合并分支<ul><li>第一步:切换到接受修改的分支<code>git checkout [接受修改的分支]</code></li><li>第二步:执行<code>git merge [有新内容的分支]</code></li></ul></li><li>合并分支冲突的解决<ul><li>冲突的表现<br><img src="https://s2.ax1x.com/2019/08/16/mmBbsU.png" alt="冲突的表现"></li><li>冲突的解决<ul><li>第一步：编辑文件，删除特殊符号</li><li>第二步：把文件修改到满意的程度，保存退出</li><li>第三步：git add [文件名]</li><li>第四步：git commit -m “日志信息” (注意：此时 commit 一定不能带具体文件名)</li></ul></li></ul></li></ul></li></ol><h2 id="Git基本原理"><a href="#Git基本原理" class="headerlink" title="Git基本原理"></a>Git基本原理</h2><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下<br>几个共同点：</p><ol><li>不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定(16个字节)。</li><li>哈希算法确定，输入数据确定，输出数据能够保证不变</li><li>哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大</li><li>哈希算法不可逆</li></ol><p>Git底层采用的是SHA-1的算法<br>哈希算法可以被用来验证文件。原理如下图所示：<br><img src="https://s2.ax1x.com/2019/08/16/mmyBm8.png" alt="哈希算法验证文件完整性"><br>Git 就是靠这种机制来从根本上保证数据完整性的。</p><h3 id="Git版本控制的机制"><a href="#Git版本控制的机制" class="headerlink" title="Git版本控制的机制"></a>Git版本控制的机制</h3><ol><li>集中式版本控制工具的文件管理机制<ul><li>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。<br><img src="https://s2.ax1x.com/2019/08/17/mnCiPU.png" alt="集中式版本控制工具的文件管理机制"></li></ul></li><li>Git 的文件管理机制<ul><li>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的工作方式可以称之为快照流<br><img src="https://s2.ax1x.com/2019/08/17/mnCAxJ.png" alt="Git 的文件管理机制"></li></ul></li><li>Git 的文件管理机制细节<ul><li>Git的提交对象<br><img src="https://s2.ax1x.com/2019/08/17/mnC3xH.png" alt="Git的提交对象"></li><li>提交对象及其父对象形成的链条<br><img src="https://s2.ax1x.com/2019/08/17/mnCGMd.png" alt="提交对象及其父对象形成的链条"></li></ul></li></ol><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="账号信息"><a href="#账号信息" class="headerlink" title="账号信息"></a>账号信息</h3><ul><li>Github注册(略)</li><li>创建仓库:New repository<br><img src="https://s2.ax1x.com/2019/08/17/muw0w4.png" alt="新建仓库"><br><img src="https://s2.ax1x.com/2019/08/17/mu0Xgx.png" alt="仓库设置"></li></ul><h3 id="给远程库取一个别名"><a href="#给远程库取一个别名" class="headerlink" title="给远程库取一个别名"></a>给远程库取一个别名</h3><ul><li>第一步:获取仓库的html地址</li><li>第二步:在本地Git中执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [别名] [html地址]</span><br></pre></td></tr></table></figure><ul><li>之后可以用<code>git remote -v</code>来查看所有仓库的别名<br><img src="https://s2.ax1x.com/2019/08/17/muBSbD.png" alt="给远程库取别名"></li></ul><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><ul><li>在本地Git中执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><ul><li>在本地Git中执行操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [远程地址]</span><br></pre></td></tr></table></figure><ul><li>效果</li><li>完整下载远程库</li><li>创建 origin 远程地址别名</li><li>初始化本地库</li></ul><h3 id="邀请成员进入项目"><a href="#邀请成员进入项目" class="headerlink" title="邀请成员进入项目"></a>邀请成员进入项目</h3><ul><li><img src="https://s2.ax1x.com/2019/08/17/muzinI.png" alt="邀请成员进项目"><br>“A”把邀请链接发送给“B”，“B”登录自己的 GitHub账号，访问邀请链接。</li><li><img src="https://s2.ax1x.com/2019/08/18/mQ35X4.png" alt="邀请成员进项目"></li></ul><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><ul><li>在了解拉取这个操作之前，我们先了解另外一个操作<code>fetch</code>，即读取，抓取。它的主要作用是读取git远程库的内容。它的使用方法是:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br></pre></td></tr></table></figure><ul><li>而<code>pull</code>，拉取命令，相当于读取和合并两个命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程库地址别名] [远程分支名]</span><br><span class="line">=</span><br><span class="line">git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">+</span><br><span class="line">git merge [远程库地址别名/远程分支名]</span><br></pre></td></tr></table></figure><blockquote><p><i class = "fa fa-quote-left fa-3x fa-pull-left"></i>终于，在三天的边学边写下，学完了大部分基础的Git和Github的操作。还是比较难的，建议新手可以再去看看别的教程。</p></blockquote><p>参考:<br><img src="https://s2.ax1x.com/2019/08/18/mlij74.png" alt="Bilibili尚硅谷Git教程"><br><a href="https://www.bilibili.com/video/av24441039/" title="尚硅谷bilibili">Bilibili尚硅谷Git教程</a></p><p>资料下载:<br><a href="https://pan.baidu.com/s/1wY4L8HHK38RInfGXtb2GGA" title="尚硅谷笔记">密码ug1v</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（更新中）Markdown学习笔记(2):Markdown进阶</title>
      <link href="/Markdown%E2%95%A4%D0%B7%E2%95%A7%E2%96%91%E2%96%92%E2%95%A9%E2%95%9D%E2%95%9F-2/"/>
      <url>/Markdown%E2%95%A4%D0%B7%E2%95%A7%E2%96%91%E2%96%92%E2%95%A9%E2%95%9D%E2%95%9F-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><head>    <link href="https://cdn.bootcss.com/font-awesome/5.10.2/css/all.css" rel="stylesheet"></head> <blockquote><p><i class="fa fa-quote-left">&lt;/i&gt;Markdown真好用！<i class="fa fa-quote-right"></i></p></blockquote><a id="more"></a><hr><h1 id="使用Font-Awesome美化Markdown"><a href="#使用Font-Awesome美化Markdown" class="headerlink" title="使用Font Awesome美化Markdown"></a>使用<a href="https://fontawesome.com/icons?d=gallery" title="Font Awesome">Font Awesome</a>美化Markdown</h1><blockquote><p><i class="fa fa-quote-left fa-3x fa-pull-left"></i>在Markdown中，我们时常要调用一些小图片，而这些小图片如果去网上找或者上传图床会十分的麻烦。此时，一种一站式解决方案出现了——Font Awesome<br>Font Awesome是一个图标站，并且可以方便的调用刀Markdown、HTML中，所以这是一个很强大的工具。今天就来学习一下在Markdown语言中Font Awesome的用法</p></blockquote><h2 id="Font-Awesome基础"><a href="#Font-Awesome基础" class="headerlink" title="Font Awesome基础"></a>Font Awesome基础</h2><h3 id="添加图标"><a href="#添加图标" class="headerlink" title="添加图标"></a>添加图标</h3><p>效果:</p><p><i class="fab fa-weixin"></i> 我的微信</p><p>使用方法:<br><strong>第一步:在<a href="http://www.fontawesome.com.cn/get-started/">Font Awesome的CDN站</a>注册并获取自己的js文件</strong> </p><blockquote><p>这里使用CDN站是因为Font Awesome的主站在国内访问比较慢，CDN站速度会快很多</p></blockquote><p>之后,我们便获取了一个专属的js文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://use.fontawesome.com/你的专属码.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>第二步:将这个js文件插入Markdown文件</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://use.fontawesome.com/你的专属码.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br></pre></td></tr></table></figure><br>我们需要将上面这段代码插入Markdown文件的任意位置</p><p><strong>第三步:在文章中调用图标文件</strong></p><p>我们可以去<a href="https://fontawesome.com/icons?d=gallery">FontAwesome官网</a>找到心水的图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-weixin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 我的微信</span><br></pre></td></tr></table></figure><h3 id="放大图标"><a href="#放大图标" class="headerlink" title="放大图标"></a>放大图标</h3><p><strong>方法一:使用fa-nx放大</strong><br>效果:<br><i class = "fab fa-weixin">&lt;/i&gt;1x<br><i class = "fab fa-weixin fa-lg"></i>133%<br><i class = "fab fa-weixin fa-2x">&lt;/i&gt;2x<br><i class = "fab fa-weixin fa-3x"></i>3x</p><p>代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>1x</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin fa-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>133%</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin fa-2x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>2x</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin fa-3x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>3x</span><br><span class="line">缺点:最高支持五倍放大</span><br></pre></td></tr></table></figure></p><p><strong>方法二:使用font-size放大</strong><br>效果:<br><i class = "fab fa-weixin" style = "font-size: 10px">&lt;/i&gt;10px<br><i class = "fab fa-weixin" style = "font-size: 30px"></i>30px<br><i class = "fab fa-weixin" style = "font-size: 50px"></i>50px</p><p>代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin&quot;</span> <span class="attr">style</span> = <span class="string">&quot;font-size: 10px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>10px</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin&quot;</span> <span class="attr">style</span> = <span class="string">&quot;font-size: 30px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>30px</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin&quot;</span> <span class="attr">style</span> = <span class="string">&quot;font-size: 50px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>50px</span><br><span class="line">优点:无限放大</span><br><span class="line">缺点:麻烦</span><br></pre></td></tr></table></figure></p><h2 id="Font-Awesome进阶"><a href="#Font-Awesome进阶" class="headerlink" title="Font Awesome进阶"></a>Font Awesome进阶</h2><h3 id="图标上色"><a href="#图标上色" class="headerlink" title="图标上色"></a>图标上色</h3><p>效果:</p><p><i class = "fab fa-weixin fa-2x" style = "color:red">&lt;/i&gt;红<br><i class = "fab fa-weixin fa-2x" style = "color:green"></i>绿</p><blockquote><p>死亡配色…</p></blockquote><p>代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin fa-2x&quot;</span> <span class="attr">style</span> = <span class="string">&quot;color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>红    </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fab fa-weixin fa-2x&quot;</span> <span class="attr">style</span> = <span class="string">&quot;color:green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>绿</span><br></pre></td></tr></table></figure></p><h3 id="让图标动起来"><a href="#让图标动起来" class="headerlink" title="让图标动起来"></a>让图标动起来</h3><p>效果:</p><p><i class = "fa fa-spinner fa-2x fa-spin">&lt;/i&gt;连续的旋转<br><i class = "fa fa-spinner fa-2x fa-pulse"></i>八帧旋转</p><p>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fa fa-spinner fa-2x fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>连续的旋转  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span> = <span class="string">&quot;fa fa-spinner fa-2x fa-pulse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>八帧旋转</span><br></pre></td></tr></table></figure></p><p>附:常用的旋转图标<br><i class = "fa fa-spinner fa-spin">&lt;/i&gt;加载图标1`<i class = "fa fa-spinner fa-spin"></i><code>&lt;i class = &quot;fa fa-circle-o-notch fa-spin&quot;&gt;&lt;/i&gt;加载图标2</code><i class = "fa fa-circle-o-notch fa-spin">`<br><i class = "fa fa-cog fa-spin"></i>设置图标<code>&lt;i class = &quot;fa fa-cog fa-spin&quot;&gt;</code><br><i class = "fa fa-refresh fa-spin"></i>刷新图标<code>&lt;i class = &quot;fa fa-refresh fa-spin&quot;&gt;</code>  </p><h3 id="图标下沉-文字环绕"><a href="#图标下沉-文字环绕" class="headerlink" title="图标下沉(文字环绕)"></a>图标下沉(文字环绕)</h3><p>效果（此处引用开头的代码）:</p><blockquote><p><i class="fa fa-quote-left fa-3x fa-pull-left"></i>在Markdown中，我们时常要调用一些小图片，而这些小图片如果去网上找或者上传图床会十分的麻烦。此时，一种一站式解决方案出现了——Font Awesome<br>Font Awesome是一个图标站，并且可以方便的调用刀Markdown、HTML中，所以这是一个很强大的工具。今天就来学习一下在Markdown语言中Font Awesome的用法</p></blockquote><p>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-quote-left fa-3x fa-pull-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>在Markdown中，我们时常要调用一些小图片，而这些小图片如果去网上找或者上传图床会十分的麻烦。此时，一种一站式解决方案出现了——Font Awesome  </span><br><span class="line">&gt; Font Awesome是一个图标站，并且可以方便的调用刀Markdown、HTML中，所以这是一个很强大的工具。今天就来学习一下在Markdown语言中Font Awesome的用法</span><br></pre></td></tr></table></figure></p><h3 id="图标加边框"><a href="#图标加边框" class="headerlink" title="图标加边框"></a>图标加边框</h3><p>效果<br><i class="fa fa-quote-left fa-border"></i></p><p>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-quote-left fa-border&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="图标的旋转与翻转"><a href="#图标的旋转与翻转" class="headerlink" title="图标的旋转与翻转"></a>图标的旋转与翻转</h3><p><strong>旋转</strong><br>效果<br><i class="fa fa-arrow-up">&lt;/i&gt;上箭头<br><i class="fa fa-arrow-up fa-rotate-90"></i>左箭头<br><i class="fa fa-arrow-up fa-rotate-180">&lt;/i&gt;下箭头<br><i class="fa fa-arrow-up fa-rotate-270"></i>右箭头  </p><p>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>上箭头  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up fa-rotate-90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>左箭头  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up fa-rotate-180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>下箭头  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-arrow-up fa-rotate-270&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>右箭头  </span><br></pre></td></tr></table></figure></p><p><strong>翻转</strong><br>效果<br><i class="fa fa-envira">&lt;/i&gt;普通<br><i class="fa fa-envira fa-flip-horizontal"></i>左右翻转<br><i class="fa fa-envira fa-flip-vertical"></i>上下翻转  </p><p>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-envira&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>普通  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-envira fa-flip-horizontal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>左右翻转  </span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-envira fa-flip-vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>上下翻转</span><br></pre></td></tr></table></figure></p><h3 id="图标的堆叠"><a href="#图标的堆叠" class="headerlink" title="图标的堆叠"></a><del>图标的堆叠</del></h3><p>效果: </p><p><span class="fa-stack"><br><i class="fa fa-camera fa-stack-1x">&lt;/i&gt;<br><i class="fa fa-ban fa-stack-2x" style = "color:red"></i></span><br>禁止拍照</p><blockquote><p>由于melody主题的问题，不能正常显示</p></blockquote><p>代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa-stack [此处使用fa-nx或fa-lg可以整体放大]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-camera fa-stack-1x(较小图标)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-ban fa-stack-2x(较大图标)&quot;</span> <span class="attr">style</span> = <span class="string">&quot;color:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">禁止拍照</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown代码块支持的编程语言</title>
      <link href="/Markdown%E2%94%A4%C2%B7%E2%94%AC%D1%8B%E2%94%90%D1%89%E2%95%93%D0%B7%E2%94%82%E2%95%93%E2%95%A1%E2%94%80%E2%96%92%D1%80%E2%94%82%E2%95%A0%E2%95%99%D1%8F%E2%95%A4%E2%95%98/"/>
      <url>/Markdown%E2%94%A4%C2%B7%E2%94%AC%D1%8B%E2%94%90%D1%89%E2%95%93%D0%B7%E2%94%82%E2%95%93%E2%95%A1%E2%94%80%E2%96%92%D1%80%E2%94%82%E2%95%A0%E2%95%99%D1%8F%E2%95%A4%E2%95%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Markdown代码块支持的编程语言<br><a id="more"></a><br>| 语言 | 代码 |<br>|:——:|:——:|<br>AppleScript|applescript<br>ActionScript 3.0|actionscript3, as3<br>Shell|bash, shell<br>ColdFusion|coldfusion, cf<br>C&amp;C++|cpp, c<br>C#|c#, c-sharp, csharp<br>CSS|css<br>Delphi|delphi, pascal, pas<br>diff&amp;patch|diff patch<br>Erlang|erl, erlang<br>Groovy|groovy<br>Java|java<br>JavaFX|jfx, javafx<br>JavaScript|js, jscript, javascript<br>Perl|perl, pl, Perl<br>PHP|php<br>text|text, plain<br>Python|py, python<br>Ruby|ruby, rails, ror, rb<br>SASS&amp;SCSS|sass, scss<br>Scala|scala<br>SQL|sql<br>Visual Basic|vb, vbnet<br>XML|xml, xhtml, xslt, html<br>Objective C|objc, obj-c<br>F#|f#, f-sharp, fsharp<br>R|r, s, splus<br>matlab|matlab<br>swift|swift<br>GO|go, golang</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习笔记(1):Markdown基础</title>
      <link href="/Markdown%E2%95%A4%D0%B7%E2%95%A7%E2%96%91%E2%96%92%E2%95%A9%E2%95%9D%E2%95%9F-1/"/>
      <url>/Markdown%E2%95%A4%D0%B7%E2%95%A7%E2%96%91%E2%96%92%E2%95%A9%E2%95%9D%E2%95%9F-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>在刚搭建起博客的时候，便要开始学会博文的撰写。这难度甚至要大于建立和优化博客，虽然我可以简单地用普通纯文本文档来当我的博文，不过未免也太low了一点。于是，爱学习的码农Tim开始了他的Markdown学习之旅…<br><a id="more"></a></p><hr><h1 id="Markdown基础"><a href="#Markdown基础" class="headerlink" title="Markdown基础"></a>Markdown基础</h1><h2 id="如何生成标题？"><a href="#如何生成标题？" class="headerlink" title="如何生成标题？"></a>如何生成标题？</h2><p>在html语句中，一共有六种html标题标签（h1-h6），所以在Markdown中相对应的也有六种标题语句</p><p>效果:<br><img src="https://dn-coding-net-production-pp.codehub.cn/d46c3a8f-b74a-4008-ad1d-a56be443d5fa.png" alt="标题效果" title="标题效果"></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1标题</span></span><br><span class="line"><span class="section">## h2标题</span></span><br><span class="line"><span class="section">### h3标题</span></span><br><span class="line">...</span><br><span class="line"><span class="section">###### h6标题</span></span><br></pre></td></tr></table></figure></p><p>注意，#后面要有一个空格！</p><p>当然，为了文档美观以及方便调用，最常用的h1、h2标题有简写的方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h1标题</span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">h2标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="自然段换行"><a href="#自然段换行" class="headerlink" title="自然段换行"></a>自然段换行</h2><p>在Markdown语句中，单个回车是不能实现换行的。有两种比较简单的方法来换行:</p><h3 id="法一-敲两下回车"><a href="#法一-敲两下回车" class="headerlink" title="法一:敲两下回车"></a>法一:敲两下回车</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcdefg</span><br><span class="line"></span><br><span class="line">hijklmn</span><br></pre></td></tr></table></figure><h3 id="法二-在回车后加两个空格"><a href="#法二-在回车后加两个空格" class="headerlink" title="法二:在回车后加两个空格"></a>法二:在回车后加两个空格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abcdefg  </span><br><span class="line">hijklmn</span><br></pre></td></tr></table></figure><p>当然，你也可以使用类似HTML的语法来写（br/）:</p><h3 id="法三-使用HTML的br-语句"><a href="#法三-使用HTML的br-语句" class="headerlink" title="法三:使用HTML的br/语句"></a>法三:使用HTML的br/语句</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abcdefg<span class="tag">&lt;<span class="name">br</span>/&gt;</span>hijklmn</span><br><span class="line">或</span><br><span class="line">abcdefg<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">hijklmn</span><br></pre></td></tr></table></figure><h2 id="段落引用"><a href="#段落引用" class="headerlink" title="段落引用"></a>段落引用</h2><p>Markdown中，有非常简单的方法将一段文字转换成引用的样式，就是在文字前面加一个“&gt;”符号（一样要加空格）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; abcdefg</span></span><br></pre></td></tr></table></figure><p>效果:</p><blockquote><p>我是引用来的</p></blockquote><h2 id="添加分割线"><a href="#添加分割线" class="headerlink" title="添加分割线"></a>添加分割线</h2><p>Markdown中，有非常简单的方法生成分割线，有以下四种代码:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">__<span class="emphasis">_</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis"></span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong"><span class="emphasis">- - - </span></span></span></span></span><br></pre></td></tr></table></figure><p>这四种代码相当于HTML中的hr标签，四种效果也是完全一样</p><h2 id="文字的强调显示"><a href="#文字的强调显示" class="headerlink" title="文字的强调显示"></a>文字的强调显示</h2><p>在Markdown中，打出粗体和斜体也是非常简单的:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">斜体: <span class="emphasis">*XXX*</span>，<span class="emphasis">_XXX_</span></span><br><span class="line">粗体: <span class="strong">**XXX**</span>，<span class="strong">__XXXX__</span></span><br></pre></td></tr></table></figure><p>效果:<br><em>斜体</em><br><strong>粗体</strong><br><strong><em>粗斜体</em></strong></p><h2 id="列表表示"><a href="#列表表示" class="headerlink" title="列表表示"></a>列表表示</h2><p>Markdown中，可以有简单的符号来让你的文字更有序，列表也分两种，有序与无序表:</p><h3 id="无序表"><a href="#无序表" class="headerlink" title="无序表"></a>无序表</h3><h4 id="第一种-“-”"><a href="#第一种-“-”" class="headerlink" title="第一种:“-”"></a>第一种:“-”</h4><p>效果:  </p><ul><li>目录1</li><li>目录2<ul><li>子目录1</li><li>子目录2</li></ul></li><li>目录3</li></ul><p>代码:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 目录1</span><br><span class="line"><span class="bullet">-</span> 目录2</span><br><span class="line"><span class="bullet">    -</span> 子目录1</span><br><span class="line"><span class="bullet">    -</span> 子目录2</span><br><span class="line"><span class="bullet">-</span> 目录3</span><br></pre></td></tr></table></figure><h4 id="第二种-“-”"><a href="#第二种-“-”" class="headerlink" title="第二种:“+”"></a>第二种:“+”</h4><p>效果:  </p><ul><li>目录1</li><li>目录2<ul><li>子目录1</li><li>子目录2</li></ul></li><li>目录3</li></ul><p>代码:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> 目录1</span><br><span class="line"><span class="bullet">+</span> 目录2</span><br><span class="line"><span class="bullet">    +</span> 子目录1</span><br><span class="line"><span class="bullet">    +</span> 子目录2</span><br><span class="line"><span class="bullet">+</span> 目录3</span><br></pre></td></tr></table></figure><h4 id="第三种-“-”"><a href="#第三种-“-”" class="headerlink" title="第三种:“*”"></a>第三种:“*”</h4><p>效果:  </p><ul><li>目录1</li><li>目录2<ul><li>子目录1</li><li>子目录2</li></ul></li><li>目录3</li></ul><p>代码:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 目录1</span><br><span class="line"><span class="bullet">*</span> 目录2</span><br><span class="line"><span class="bullet">    *</span> 子目录1</span><br><span class="line"><span class="bullet">    *</span> 子目录2</span><br><span class="line"><span class="bullet">*</span> 目录3</span><br></pre></td></tr></table></figure><h3 id="有序表"><a href="#有序表" class="headerlink" title="有序表"></a>有序表</h3><p>效果:  </p><ol><li>目录1  </li><li>目录2  </li><li>目录3</li><li>目录4</li><li>目录5</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 目录1  </span><br><span class="line"><span class="bullet">1.</span> 目录2  </span><br><span class="line"><span class="bullet">1.</span> 目录3</span><br><span class="line"><span class="bullet">1.</span> 目录4</span><br><span class="line"><span class="bullet">1.</span> 目录5</span><br><span class="line"></span><br><span class="line">第一项必须写1.，其他的项可以用任何数字替代</span><br></pre></td></tr></table></figure><h3 id="待办列表"><a href="#待办列表" class="headerlink" title="待办列表"></a>待办列表</h3><p>效果:  </p><ul><li>[ ] 不勾选</li><li>[x] 勾选</li></ul><p>代码:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 不勾选</span><br><span class="line"><span class="bullet">-</span> [x] 勾选</span><br><span class="line">VSCode中无法正常显示</span><br></pre></td></tr></table></figure><h2 id="超文本链接的书写"><a href="#超文本链接的书写" class="headerlink" title="超文本链接的书写"></a>超文本链接的书写</h2><p>Markdown中，非常容易用到超链接，代码如下:</p><h3 id="第一种-直接写链接"><a href="#第一种-直接写链接" class="headerlink" title="第一种:直接写链接"></a>第一种:直接写链接</h3><p>效果:<br><a href="https://bilibili.com">https://bilibili.com</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bilibili.com</span><br></pre></td></tr></table></figure><h3 id="第二种-链接打上尖括号"><a href="#第二种-链接打上尖括号" class="headerlink" title="第二种:链接打上尖括号"></a>第二种:链接打上尖括号</h3><p>效果:<br><a href="https://bilibili.com">https://bilibili.com</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">https:</span>//<span class="attr">bilibili.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>以上两种方法都无法控制链接文字，要控制超链接文字，请用三、四种</p><h3 id="第三种-可控文字"><a href="#第三种-可控文字" class="headerlink" title="第三种:可控文字"></a>第三种:可控文字</h3><p>效果:<br><a href="https://bilibili.com">小破站nb</a></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">小破站nb</span>](<span class="link">https://bilibili.com</span>)</span><br></pre></td></tr></table></figure></p><h3 id="第四种-可控文字-鼠标悬停显示"><a href="#第四种-可控文字-鼠标悬停显示" class="headerlink" title="第四种:可控文字+鼠标悬停显示"></a>第四种:可控文字+鼠标悬停显示</h3><p>效果:<br><a href="https://bilibili.com" title="干杯！">小破站nb</a></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">小破站nb</span>](<span class="link">https://bilibili.com &quot;干杯！&quot;</span>)</span><br></pre></td></tr></table></figure></p><h2 id="代码高亮显示"><a href="#代码高亮显示" class="headerlink" title="代码高亮显示"></a>代码高亮显示</h2><p>不多说，码农必备~:</p><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>效果:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">&quot;HelloWorld!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br></pre></td></tr></table></figure></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`+`</span>`cpp(填写语言类型) </span><br><span class="line">char a = &quot;HelloWorld!&quot;;</span><br><span class="line">printf(&quot;%d&quot;,a);</span><br><span class="line"><span class="code">`+`</span>`</span><br><span class="line"></span><br><span class="line">去掉加号（不然我的博客显示有问题）</span><br></pre></td></tr></table></figure></p><h3 id="行中代码"><a href="#行中代码" class="headerlink" title="行中代码"></a>行中代码</h3><p>效果:</p><p>C++语言中字符要用Char类型存储，如:<code>char a = &quot;HelloWorld!&quot;;</code></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C++语言中字符要用Char类型存储，如:<span class="code">`char a = &quot;HelloWorld!&quot;;`</span></span><br></pre></td></tr></table></figure></p><p><strong>附:Markdown支持的语言:<a href="http://timlzh.github.io/2019/08/14/Markdown%E4%BB%A3%E7%A0%81%E5%9D%97%E6%94%AF%E6%8C%81%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/" title="Markdown代码块支持的编程语言">点击跳转</a></strong></p><h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><p>写文章用图片数量可不少，先找到个好图床，再来学习也不迟:</p><p>这里推荐一个免费的图床:<a href="https//im.sb" title="免费图床">路过图床</a></p><h3 id="图片显示-1"><a href="#图片显示-1" class="headerlink" title="图片显示"></a>图片显示</h3><p>效果:<br><img src="https://s2.ax1x.com/2019/08/14/mPsJe0.jpg" alt="我用的壁纸" title="小厉的壁纸"></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">我用的壁纸</span>](<span class="link">https://s2.ax1x.com/2019/08/14/mPsJe0.jpg &quot;小厉的壁纸&quot;</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">alt文字</span>](<span class="link">链接 &quot;鼠标悬停文字&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="点击图片跳转链接"><a href="#点击图片跳转链接" class="headerlink" title="点击图片跳转链接"></a><del>点击图片跳转链接</del></h3><p>效果:<br><a href="https://bilibili.com" title="点击跳转到破站"><img src="https://s2.ax1x.com/2019/08/14/mPsJe0.jpg" alt="点击跳转到破站" title="点击跳转到破站"></a></p><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![点击跳转到破站</span>](<span class="link">https://s2.ax1x.com/2019/08/14/mPsJe0.jpg &quot;点击跳转到破站&quot;</span>)](<span class="link">https://bilibili.com &quot;点击跳转到破站&quot;</span>)</span><br><span class="line"></span><br><span class="line">（超文本链接代码嵌套图片显示代码）</span><br><span class="line">（由于本方法被主题放大图片功能覆盖，失效）</span><br></pre></td></tr></table></figure></p><h2 id="表格制作"><a href="#表格制作" class="headerlink" title="表格制作"></a>表格制作</h2><p>非常常用，非常重要！</p><p>如下:</p><p>效果:  </p><div class="table-container"><table><thead><tr><th></th><th>标题1</th><th>标题2</th><th>标题3</th></tr></thead><tbody><tr><td></td><td>内容1</td><td>内容2</td><td>内容3</td><td></td></tr><tr><td></td><td>内容1</td><td>内容2</td><td>内容3</td><td></td></tr></tbody></table></div><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标题1 | 标题2 | 标题3 |</span><br><span class="line">----|----|----</span><br><span class="line">| 内容1 | 内容2 | 内容3 |</span><br><span class="line">| 内容1 | 内容2 | 内容3 |</span><br></pre></td></tr></table></figure></p><h3 id="文字对齐的做法"><a href="#文字对齐的做法" class="headerlink" title="文字对齐的做法"></a>文字对齐的做法</h3><p>效果:  </p><div class="table-container"><table><thead><tr><th style="text-align:left">居左</th><th style="text-align:center">居中</th><th style="text-align:right">居右</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:center">2</td><td style="text-align:right">3</td></tr><tr><td style="text-align:left">1</td><td style="text-align:center">2</td><td style="text-align:right">3</td></tr></tbody></table></div><p>代码:<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 居左 | 居中 | 居右 |</span><br><span class="line">|:----|:----:|----:|</span><br><span class="line">|1|2|3|</span><br><span class="line">|1|2|3|</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/My-First-Blog/"/>
      <url>/My-First-Blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一个博客<br><a id="more"></a></p><h1 id="第一个博客"><a href="#第一个博客" class="headerlink" title="第一个博客"></a>第一个博客</h1><hr><p>HelloWorld!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
